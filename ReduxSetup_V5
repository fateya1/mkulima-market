// src/redux/store.ts
import { configureStore } from '@reduxjs/toolkit';
import { 
  persistStore, 
  persistReducer,
  FLUSH,
  REHYDRATE,
  PAUSE,
  PERSIST,
  PURGE,
  REGISTER
} from 'redux-persist';
import storage from 'redux-persist/lib/storage';
import rootReducer from './rootReducer';

const persistConfig = {
  key: 'root',
  version: 1,
  storage,
  whitelist: ['auth', 'user', 'settings'] // Specify which reducers to persist
};

const persistedReducer = persistReducer(persistConfig, rootReducer);

export const store = configureStore({
  reducer: persistedReducer,
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware({
      serializableCheck: {
        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]
      }
    })
});

export const persistor = persistStore(store);

// Types for TypeScript support
export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;

// src/redux/rootReducer.ts
import { combineReducers } from '@reduxjs/toolkit';
import authReducer from './slices/authSlice';
import userProfileReducer from './slices/userProfileSlice';
import marketplaceReducer from './slices/marketplaceSlice';
import transactionReducer from './slices/transactionSlice';
import transportReducer from './slices/transportSlice';
import notificationReducer from './slices/notificationSlice';
import settingsReducer from './slices/settingsSlice';

const rootReducer = combineReducers({
  auth: authReducer,
  userProfile: userProfileReducer,
  marketplace: marketplaceReducer,
  transactions: transactionReducer,
  transport: transportReducer,
  notifications: notificationReducer,
  settings: settingsReducer
});

export default rootReducer;

// src/redux/slices/authSlice.ts
import { createSlice, PayloadAction } from '@reduxjs/toolkit';

interface AuthState {
  isAuthenticated: boolean;
  token: string | null;
  userType: 'farmer' | 'buyer' | 'transporter' | null;
  verificationLevel: 'basic' | 'standard' | 'enhanced';
}

const initialState: AuthState = {
  isAuthenticated: false,
  token: null,
  userType: null,
  verificationLevel: 'basic'
};

const authSlice = createSlice({
  name: 'auth',
  initialState,
  reducers: {
    login: (state, action: PayloadAction<{
      token: string;
      userType: 'farmer' | 'buyer' | 'transporter';
      verificationLevel: 'basic' | 'standard' | 'enhanced';
    }>) => {
      state.isAuthenticated = true;
      state.token = action.payload.token;
      state.userType = action.payload.userType;
      state.verificationLevel = action.payload.verificationLevel;
    },
    logout: (state) => {
      state.isAuthenticated = false;
      state.token = null;
      state.userType = null;
      state.verificationLevel = 'basic';
    }
  }
});

export const { login, logout } = authSlice.actions;
export default authSlice.reducer;

// src/redux/slices/userProfileSlice.ts
import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';
import { updateUserProfile } from '../../services/userService';

interface UserProfile {
  id: string;
  fullName: string;
  phoneNumber: string;
  email?: string;
  farmSize?: number;
  primaryCrops?: string[];
  location?: {
    county: string;
    subCounty: string;
  };
}

interface UserProfileState {
  profile: UserProfile | null;
  loading: boolean;
  error: string | null;
}

const initialState: UserProfileState = {
  profile: null,
  loading: false,
  error: null
};

export const updateProfile = createAsyncThunk(
  'userProfile/update',
  async (profileData: Partial<UserProfile>, { rejectWithValue }) => {
    try {
      const updatedProfile = await updateUserProfile(profileData);
      return updatedProfile;
    } catch (error) {
      return rejectWithValue('Failed to update profile');
    }
  }
);

const userProfileSlice = createSlice({
  name: 'userProfile',
  initialState,
  reducers: {
    setUserProfile: (state, action: PayloadAction<UserProfile>) => {
      state.profile = action.payload;
    }
  },
  extraReducers: (builder) => {
    builder
      .addCase(updateProfile.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(updateProfile.fulfilled, (state, action) => {
        state.loading = false;
        state.profile = action.payload;
      })
      .addCase(updateProfile.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload as string;
      });
  }
});

export const { setUserProfile } = userProfileSlice.actions;
export default userProfileSlice.reducer;

// src/redux/slices/marketplaceSlice.ts
import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';
import { 
  fetchMarketListings, 
  createListing, 
  searchListings 
} from '../../services/marketplaceService';

interface Listing {
  id: string;
  productName: string;
  quantity: number;
  unit: string;
  price: number;
  location: string;
  quality: string;
  availabilityDate: string;
}

interface MarketplaceState {
  listings: Listing[];
  searchResults: Listing[];
  loading: boolean;
  error: string | null;
}

const initialState: MarketplaceState = {
  listings: [],
  searchResults: [],
  loading: false,
  error: null
};

export const fetchListings = createAsyncThunk(
  'marketplace/fetchListings',
  async (_, { rejectWithValue }) => {
    try {
      const listings = await fetchMarketListings();
      return listings;
    } catch (error) {
      return rejectWithValue('Failed to fetch listings');
    }
  }
);

export const createNewListing = createAsyncThunk(
  'marketplace/createListing',
  async (listingData: Omit<Listing, 'id'>, { rejectWithValue }) => {
    try {
      const newListing = await createListing(listingData);
      return newListing;
    } catch (error) {
      return rejectWithValue('Failed to create listing');
    }
  }
);

export const searchMarketplace = createAsyncThunk(
  'marketplace/search',
  async (searchParams: Partial<Listing>, { rejectWithValue }) => {
    try {
      const results = await searchListings(searchParams);
      return results;
    } catch (error) {
      return rejectWithValue('Failed to search listings');
    }
  }
);

const marketplaceSlice = createSlice({
  name: 'marketplace',
  initialState,
  reducers: {
    clearSearchResults: (state) => {
      state.searchResults = [];
    }
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchListings.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchListings.fulfilled, (state, action) => {
        state.loading = false;
        state.listings = action.payload;
      })
      .addCase(fetchListings.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload as string;
      })
      .addCase(createNewListing.fulfilled, (state, action) => {
        state.listings.push(action.payload);
      })
      .addCase(searchMarketplace.fulfilled, (state, action) => {
        state.searchResults = action.payload;
      });
  }
});

export const { clearSearchResults } = marketplaceSlice.actions;
export default marketplaceSlice.reducer;

// Hooks for easy Redux usage
// src/redux/hooks.ts
import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';
import type { RootState, AppDispatch } from './store';

export const useAppDispatch = () => useDispatch<AppDispatch>();
export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;
