// M-Pesa Integration Module for MkulimaMarket
// This module implements the Safaricom Daraja API integration for the platform
// as outlined in section 4.6.1 of the documentation

const axios = require('axios');
const crypto = require('crypto');
const moment = require('moment');
const Redis = require('ioredis');
const logger = require('../utils/logger');

// Configuration should be loaded from environment variables in production
const config = {
  consumerKey: process.env.MPESA_CONSUMER_KEY,
  consumerSecret: process.env.MPESA_CONSUMER_SECRET,
  passKey: process.env.MPESA_PASS_KEY,
  shortCode: process.env.MPESA_SHORT_CODE, // Business short code
  initiatorName: process.env.MPESA_INITIATOR_NAME,
  securityCredential: process.env.MPESA_SECURITY_CREDENTIAL,
  baseUrl: process.env.MPESA_API_BASE_URL || 'https://sandbox.safaricom.co.ke',
  callbackUrl: process.env.MPESA_CALLBACK_URL,
  timeout: process.env.MPESA_TIMEOUT || 60000, // 60 seconds default
  redis: {
    host: process.env.REDIS_HOST || 'localhost',
    port: process.env.REDIS_PORT || 6379,
    password: process.env.REDIS_PASSWORD || ''
  }
};

// Initialize Redis client for caching tokens and transaction status
const redisClient = new Redis(config.redis);

/**
 * Get OAuth token for Daraja API authentication
 * @returns {Promise<string>} Access token
 */
async function getAccessToken() {
  try {
    // Check if we have a cached token
    const cachedToken = await redisClient.get('mpesa_access_token');
    if (cachedToken) {
      return cachedToken;
    }

    // If no cached token, request a new one
    const auth = Buffer.from(`${config.consumerKey}:${config.consumerSecret}`).toString('base64');
    const response = await axios({
      method: 'get',
      url: `${config.baseUrl}/oauth/v1/generate?grant_type=client_credentials`,
      headers: {
        'Authorization': `Basic ${auth}`
      }
    });

    if (response.data && response.data.access_token) {
      // Cache token for 50 minutes (tokens are valid for 1 hour)
      await redisClient.set('mpesa_access_token', response.data.access_token, 'EX', 3000);
      return response.data.access_token;
    } else {
      throw new Error('Failed to get access token');
    }
  } catch (error) {
    logger.error('M-Pesa access token error:', error);
    throw new Error(`Failed to get access token: ${error.message}`);
  }
}

/**
 * Initiate STK Push (Lipa Na M-Pesa Online) for C2B payments
 * This allows buyers to pay farmers through the platform
 * 
 * @param {Object} paymentData Payment details
 * @param {string} paymentData.phoneNumber Customer phone number (format: 254XXXXXXXXX)
 * @param {number} paymentData.amount Amount to be paid
 * @param {string} paymentData.accountReference Transaction reference (e.g., order ID)
 * @param {string} paymentData.description Transaction description
 * @param {string} paymentData.callbackUrl Optional override for callback URL
 * @returns {Promise<Object>} STK push response
 */
async function initiateSTKPush(paymentData) {
  try {
    const token = await getAccessToken();
    const timestamp = moment().format('YYYYMMDDHHmmss');
    const password = Buffer.from(
      `${config.shortCode}${config.passKey}${timestamp}`
    ).toString('base64');

    const response = await axios({
      method: 'post',
      url: `${config.baseUrl}/mpesa/stkpush/v1/processrequest`,
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      data: {
        BusinessShortCode: config.shortCode,
        Password: password,
        Timestamp: timestamp,
        TransactionType: 'CustomerPayBillOnline',
        Amount: paymentData.amount.toString(),
        PartyA: paymentData.phoneNumber,
        PartyB: config.shortCode,
        PhoneNumber: paymentData.phoneNumber,
        CallBackURL: paymentData.callbackUrl || config.callbackUrl,
        AccountReference: paymentData.accountReference,
        TransactionDesc: paymentData.description || 'MkulimaMarket payment'
      }
    });

    // Store transaction data for later reference and verification
    if (response.data && response.data.CheckoutRequestID) {
      await redisClient.setex(
        `stk_request:${response.data.CheckoutRequestID}`,
        3600, // Store for 1 hour
        JSON.stringify({
          checkoutRequestId: response.data.CheckoutRequestID,
          merchantRequestId: response.data.MerchantRequestID,
          amount: paymentData.amount,
          phoneNumber: paymentData.phoneNumber,
          accountReference: paymentData.accountReference,
          timestamp: new Date().toISOString(),
          status: 'pending'
        })
      );
    }

    return response.data;
  } catch (error) {
    logger.error('STK push error:', error);
    throw new Error(`Failed to initiate payment: ${error.message}`);
  }
}

/**
 * Verify STK Push transaction status
 * @param {string} checkoutRequestId CheckoutRequestID from STK push response
 * @returns {Promise<Object>} Transaction status
 */
async function verifySTKTransaction(checkoutRequestId) {
  try {
    const token = await getAccessToken();
    const timestamp = moment().format('YYYYMMDDHHmmss');
    const password = Buffer.from(
      `${config.shortCode}${config.passKey}${timestamp}`
    ).toString('base64');

    const response = await axios({
      method: 'post',
      url: `${config.baseUrl}/mpesa/stkpushquery/v1/query`,
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      data: {
        BusinessShortCode: config.shortCode,
        Password: password,
        Timestamp: timestamp,
        CheckoutRequestID: checkoutRequestId
      }
    });

    return response.data;
  } catch (error) {
    logger.error('STK verification error:', error);
    throw new Error(`Failed to verify transaction: ${error.message}`);
  }
}

/**
 * B2C Payment - For disbursing funds to farmers
 * Allows the platform to pay farmers after successful sales
 * 
 * @param {Object} paymentData Payment details
 * @param {string} paymentData.phoneNumber Recipient phone number (format: 254XXXXXXXXX)
 * @param {number} paymentData.amount Amount to be paid
 * @param {string} paymentData.remarks Description of the transaction
 * @param {string} paymentData.occassion Optional occasion
 * @returns {Promise<Object>} B2C payment response
 */
async function sendB2CPayment(paymentData) {
  try {
    const token = await getAccessToken();

    const response = await axios({
      method: 'post',
      url: `${config.baseUrl}/mpesa/b2c/v1/paymentrequest`,
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      data: {
        InitiatorName: config.initiatorName,
        SecurityCredential: config.securityCredential,
        CommandID: 'BusinessPayment', // Use SalaryPayment or PromotionPayment as appropriate
        Amount: paymentData.amount.toString(),
        PartyA: config.shortCode,
        PartyB: paymentData.phoneNumber,
        Remarks: paymentData.remarks || 'MkulimaMarket payment to farmer',
        QueueTimeOutURL: `${config.callbackUrl}/b2c/timeout`,
        ResultURL: `${config.callbackUrl}/b2c/result`,
        Occassion: paymentData.occassion || ''
      }
    });

    // Store transaction data
    if (response.data && response.data.ConversationID) {
      await redisClient.setex(
        `b2c_request:${response.data.ConversationID}`,
        3600, // Store for 1 hour
        JSON.stringify({
          conversationId: response.data.ConversationID,
          originatorConversationID: response.data.OriginatorConversationID,
          amount: paymentData.amount,
          phoneNumber: paymentData.phoneNumber,
          timestamp: new Date().toISOString(),
          status: 'pending'
        })
      );
    }

    return response.data;
  } catch (error) {
    logger.error('B2C payment error:', error);
    throw new Error(`Failed to send payment: ${error.message}`);
  }
}

/**
 * Process STK Push callback
 * This function handles callbacks from M-Pesa after STK push
 * 
 * @param {Object} callbackData Callback data from M-Pesa
 * @returns {Promise<Object>} Processed callback data
 */
async function processSTKCallback(callbackData) {
  try {
    // Extract the important data from the callback
    const { Body } = callbackData;
    
    if (!Body || !Body.stkCallback) {
      throw new Error('Invalid callback data');
    }

    const { ResultCode, ResultDesc, CheckoutRequestID, CallbackMetadata } = Body.stkCallback;
    
    // Get the original transaction data
    const transactionDataJson = await redisClient.get(`stk_request:${CheckoutRequestID}`);
    if (!transactionDataJson) {
      logger.warn(`No stored transaction found for CheckoutRequestID: ${CheckoutRequestID}`);
    }
    
    const transactionData = transactionDataJson ? JSON.parse(transactionDataJson) : {};
    
    let processedData = {
      resultCode: ResultCode,
      resultDesc: ResultDesc,
      checkoutRequestId: CheckoutRequestID,
      originalTransaction: transactionData,
      success: ResultCode === 0, // 0 means success
      timestamp: new Date().toISOString()
    };
    
    // Extract metadata if available (only available on success)
    if (CallbackMetadata && CallbackMetadata.Item) {
      const metadata = {};
      CallbackMetadata.Item.forEach(item => {
        if (item.Value) {
          metadata[item.Name] = item.Value;
        }
      });
      
      processedData.metadata = metadata;
      
      // Update the transaction status
      if (transactionDataJson) {
        const updatedData = {
          ...transactionData,
          status: processedData.success ? 'completed' : 'failed',
          resultCode: ResultCode,
          resultDesc: ResultDesc,
          metadata,
          completedAt: new Date().toISOString()
        };
        
        // Store updated transaction data
        await redisClient.setex(
          `stk_request:${CheckoutRequestID}`,
          86400, // Store for 24 hours after completion
          JSON.stringify(updatedData)
        );
        
        // Add transaction to user's history (in a real implementation, this would
        // update a database record and trigger notifications)
        if (processedData.success) {
          // This is where you would update your database with completed transaction
          logger.info(`Transaction ${CheckoutRequestID} completed successfully`);
          
          // In a real implementation, you would emit an event or call another service
          // to update the transaction status in your database and trigger notifications
        }
      }
    }
    
    return processedData;
  } catch (error) {
    logger.error('STK callback processing error:', error);
    throw new Error(`Failed to process callback: ${error.message}`);
  }
}

/**
 * Process B2C callback
 * This function handles callbacks from M-Pesa after B2C payment
 * 
 * @param {Object} callbackData Callback data from M-Pesa
 * @returns {Promise<Object>} Processed callback data
 */
async function processB2CCallback(callbackData) {
  try {
    // Extract the important data from the callback
    const { Result } = callbackData;
    
    if (!Result) {
      throw new Error('Invalid callback data');
    }

    const {
      ResultCode,
      ResultDesc,
      OriginatorConversationID,
      ConversationID,
      TransactionID,
      ResultParameters
    } = Result;
    
    // Get the original transaction data
    const transactionDataJson = await redisClient.get(`b2c_request:${ConversationID}`);
    
    const transactionData = transactionDataJson ? JSON.parse(transactionDataJson) : {};
    
    let processedData = {
      resultCode: ResultCode,
      resultDesc: ResultDesc,
      conversationId: ConversationID,
      originatorConversationId: OriginatorConversationID,
      transactionId: TransactionID,
      originalTransaction: transactionData,
      success: ResultCode === 0, // 0 means success
      timestamp: new Date().toISOString()
    };
    
    // Extract result parameters if available
    if (ResultParameters && ResultParameters.ResultParameter) {
      const metadata = {};
      ResultParameters.ResultParameter.forEach(item => {
        if (item.Value) {
          metadata[item.Key] = item.Value;
        }
      });
      
      processedData.metadata = metadata;
    }
    
    // Update the transaction status
    if (transactionDataJson) {
      const updatedData = {
        ...transactionData,
        status: processedData.success ? 'completed' : 'failed',
        resultCode: ResultCode,
        resultDesc: ResultDesc,
        transactionId: TransactionID,
        completedAt: new Date().toISOString()
      };
      
      // Store updated transaction data
      await redisClient.setex(
        `b2c_request:${ConversationID}`,
        86400, // Store for 24 hours after completion
        JSON.stringify(updatedData)
      );
      
      // Update transaction in database (in a real implementation)
      if (processedData.success) {
        logger.info(`B2C Transaction ${ConversationID} completed successfully`);
        // This is where you would update your database
      }
    }
    
    return processedData;
  } catch (error) {
    logger.error('B2C callback processing error:', error);
    throw new Error(`Failed to process B2C callback: ${error.message}`);
  }
}

/**
 * Implements escrow payment functionality as described in the docs
 * Holds payment until delivery is confirmed
 * 
 * @param {Object} escrowData Escrow payment details
 * @returns {Promise<Object>} Escrow payment reference
 */
async function createEscrowPayment(escrowData) {
  try {
    // First, process the payment from buyer
    const stkResult = await initiateSTKPush({
      phoneNumber: escrowData.buyerPhone,
      amount: escrowData.amount,
      accountReference: `ESCROW-${escrowData.transactionId}`,
      description: 'MkulimaMarket escrow payment'
    });
    
    // Create escrow record in database (this would be a real DB in production)
    const escrowRecord = {
      escrowId: `ESCROW-${Date.now()}`,
      checkoutRequestId: stkResult.CheckoutRequestID,
      transactionId: escrowData.transactionId,
      buyerPhone: escrowData.buyerPhone,
      sellerPhone: escrowData.sellerPhone,
      amount: escrowData.amount,
      releaseCondition: escrowData.releaseCondition || 'delivery_confirmation',
      status: 'payment_pending',
      createdAt: new Date().toISOString()
    };
    
    // Store in Redis temporarily (in a real implementation, this would go to a database)
    await redisClient.setex(
      `escrow:${escrowRecord.escrowId}`,
      604800, // Store for 7 days
      JSON.stringify(escrowRecord)
    );
    
    return {
      escrowId: escrowRecord.escrowId,
      status: 'payment_initiated',
      checkoutRequestId: stkResult.CheckoutRequestID
    };
  } catch (error) {
    logger.error('Escrow payment error:', error);
    throw new Error(`Failed to create escrow payment: ${error.message}`);
  }
}

/**
 * Release funds from escrow to seller
 * 
 * @param {string} escrowId Escrow ID
 * @param {string} releaseAuthorization Authorization code or signature
 * @returns {Promise<Object>} Release confirmation
 */
async function releaseEscrowPayment(escrowId, releaseAuthorization) {
  try {
    // Get escrow record
    const escrowDataJson = await redisClient.get(`escrow:${escrowId}`);
    if (!escrowDataJson) {
      throw new Error(`Escrow record not found: ${escrowId}`);
    }
    
    const escrowData = JSON.parse(escrowDataJson);
    
    // Verify that escrow is in the correct state
    if (escrowData.status !== 'payment_confirmed') {
      throw new Error(`Escrow payment not confirmed yet. Current status: ${escrowData.status}`);
    }
    
    // Verify authorization (in a real implementation, this would be more sophisticated)
    // For example, checking a digital signature or an OTP
    if (!releaseAuthorization) {
      throw new Error('Release authorization required');
    }
    
    // Process payment to seller
    const b2cResult = await sendB2CPayment({
      phoneNumber: escrowData.sellerPhone,
      amount: escrowData.amount,
      remarks: `Payment release for transaction ${escrowData.transactionId}`
    });
    
    // Update escrow record
    const updatedEscrow = {
      ...escrowData,
      status: 'released_pending',
      releaseConversationId: b2cResult.ConversationID,
      releasedAt: new Date().toISOString()
    };
    
    // Store updated record
    await redisClient.setex(
      `escrow:${escrowId}`,
      604800, // Store for 7 days
      JSON.stringify(updatedEscrow)
    );
    
    return {
      escrowId,
      status: 'release_initiated',
      conversationId: b2cResult.ConversationID
    };
  } catch (error) {
    logger.error('Escrow release error:', error);
    throw new Error(`Failed to release escrow payment: ${error.message}`);
  }
}

/**
 * Update escrow status after payment confirmation
 * 
 * @param {string} checkoutRequestId Checkout request ID
 * @param {boolean} success Payment success status
 * @returns {Promise<Object>} Updated escrow record
 */
async function updateEscrowAfterPayment(checkoutRequestId, success) {
  try {
    // Find the escrow record by checkoutRequestId
    // In a real implementation, this would be a database query
    // For this example, we'll scan Redis keys (not efficient for production)
    const keys = await redisClient.keys('escrow:*');
    let escrowKey = null;
    let escrowData = null;
    
    for (const key of keys) {
      const data = JSON.parse(await redisClient.get(key));
      if (data.checkoutRequestId === checkoutRequestId) {
        escrowKey = key;
        escrowData = data;
        break;
      }
    }
    
    if (!escrowData) {
      throw new Error(`No escrow found for checkout request ID: ${checkoutRequestId}`);
    }
    
    // Update status based on payment success
    escrowData.status = success ? 'payment_confirmed' : 'payment_failed';
    escrowData.paymentConfirmedAt = success ? new Date().toISOString() : null;
    
    // Store updated record
    await redisClient.setex(
      escrowKey,
      604800, // Store for 7 days
      JSON.stringify(escrowData)
    );
    
    return escrowData;
  } catch (error) {
    logger.error('Escrow update error:', error);
    throw new Error(`Failed to update escrow status: ${error.message}`);
  }
}

module.exports = {
  initiateSTKPush,
  verifySTKTransaction,
  sendB2CPayment,
  processSTKCallback,
  processB2CCallback,
  createEscrowPayment,
  releaseEscrowPayment,
  updateEscrowAfterPayment
};
