// Transaction Service for MkulimaMarket
// This service handles transaction management and interfaces with the database

const { db } = require('../utils/database');
const { NotFoundError } = require('../utils/errors');
const logger = require('../utils/logger');

/**
 * Get a transaction by its ID
 * 
 * @param {string} transactionId Transaction ID
 * @returns {Promise<Object>} Transaction details
 */
async function getTransaction(transactionId) {
  try {
    // In a real implementation, this would query a database
    // For simplicity, we're simulating a database operation
    const transaction = await db.transactions.findOne({ id: transactionId });
    
    if (!transaction) {
      throw new NotFoundError(`Transaction with ID ${transactionId} not found`);
    }
    
    return transaction;
  } catch (error) {
    logger.error(`Error getting transaction ${transactionId}:`, error);
    throw error;
  }
}

/**
 * Get a transaction by its checkout request ID
 * 
 * @param {string} checkoutRequestId M-Pesa checkout request ID
 * @returns {Promise<Object>} Transaction details
 */
async function getTransactionByCheckoutRequestId(checkoutRequestId) {
  try {
    // In a real implementation, this would query a database
    const transaction = await db.transactions.findOne({ checkoutRequestId });
    
    if (!transaction) {
      throw new NotFoundError(`Transaction with checkout request ID ${checkoutRequestId} not found`);
    }
    
    return transaction;
  } catch (error) {
    logger.error(`Error getting transaction by checkout request ID ${checkoutRequestId}:`, error);
    throw error;
  }
}

/**
 * Update a transaction
 * 
 * @param {string} transactionId Transaction ID
 * @param {Object} updates Fields to update
 * @returns {Promise<Object>} Updated transaction
 */
async function updateTransaction(transactionId, updates) {
  try {
    // In a real implementation, this would update a database record
    const transaction = await getTransaction(transactionId);
    
    if (!transaction) {
      throw new NotFoundError(`Transaction with ID ${transactionId} not found`);
    }
    
    // Update the transaction
    const updatedTransaction = {
      ...transaction,
      ...updates,
      updatedAt: new Date()
    };
    
    // Save to database
    await db.transactions.update(
      { id: transactionId },
      updatedTransaction
    );
    
    // If payment status changed to completed, trigger appropriate notifications
    if (updates.paymentStatus === 'completed' && transaction.paymentStatus !== 'completed') {
      await _handlePaymentCompletion(updatedTransaction);
    }
    
    // If delivery status changed to completed, handle that too
    if (updates.status === 'completed' && transaction.status !== 'completed') {
      await _handleTransactionCompletion(updatedTransaction);
    }
    
    return updatedTransaction;
  } catch (error) {
    logger.error(`Error updating transaction ${transactionId}:`, error);
    throw error;
  }
}

/**
 * Create a new transaction
 * 
 * @param {Object} transactionData Transaction data
 * @returns {Promise<Object>} Created transaction
 */
async function createTransaction(transactionData) {
  try {
    // Generate a transaction ID
    const transactionId = `TXN-${Date.now()}-${Math.floor(Math.random() * 1000)}`;
    
    const transaction = {
      id: transactionId,
      ...transactionData,
      status: 'initiated',
      paymentStatus: 'pending',
      isEscrow: transactionData.isEscrow || false,
      createdAt: new Date(),
      updatedAt: new Date()
    };
    
    // Save to database
    await db.transactions.insert(transaction);
    
    // Notify relevant parties about new transaction
    await _notifyTransactionCreation(transaction);
    
    return transaction;
  } catch (error) {
    logger.error('Error creating transaction:', error);
    throw error;
  }
}

/**
 * Get transactions for a user
 * 
 * @param {string} userId User ID
 * @param {string} role Role (buyer or seller)
 * @param {Object} filters Optional filters
 * @returns {Promise<Array>} List of transactions
 */
async function getUserTransactions(userId, role, filters = {}) {
  try {
    // Build query based on role
    const query = role === 'buyer' 
      ? { buyerId: userId } 
      : { sellerId: userId };
      
    // Add any additional filters
    if (filters.status) {
      query.status = filters.status;
    }
    
    if (filters.paymentStatus) {
      query.paymentStatus = filters.paymentStatus;
    }
    
    // In a real implementation, this would query a database
    const transactions = await db.transactions.find(query);
    
    return transactions;
  } catch (error) {
    logger.error(`Error getting transactions for user ${userId}:`, error);
    throw error;
  }
}

/**
 * Private helper functions
 */

/**
 * Handle payment completion logic
 * 
 * @param {Object} transaction The transaction with completed payment
 */
async function _handlePaymentCompletion(transaction) {
  try {
    // If this is a regular (non-escrow) transaction, mark it as completed
    if (!transaction.isEscrow) {
      // Update transaction status
      await db.transactions.update(
        { id: transaction.id },
        { 
          status: 'payment_completed',
          sellerPaymentStatus: 'completed',
          sellerPaymentCompletedAt: new Date()
        }
      );
      
      // Notify seller about received payment
      // In a real implementation, this would connect to a notification service
      logger.info(`Payment completed for transaction ${transaction.id}, notifying seller`);
    } else {
      // For escrow transactions, payment to platform is complete but not released to seller yet
      logger.info(`Escrow payment received for transaction ${transaction.id}, awaiting delivery confirmation`);
      
      // Notify seller that payment is in escrow
      // In a real implementation, this would connect to a notification service
    }
    
    // Notify buyer about successful payment
    // In a real implementation, this would connect to a notification service
  } catch (error) {
    logger.error(`Error handling payment completion for transaction ${transaction.id}:`, error);
    // Don't throw, just log the error to prevent breaking the payment flow
  }
}

/**
 * Handle transaction completion logic
 * 
 * @param {Object} transaction The completed transaction
 */
async function _handleTransactionCompletion(transaction) {
  try {
    // Update statistics, generate reports, etc.
    // In a real implementation, this would update various metrics
    
    // Prompt for ratings
    // In a real implementation, this would initiate the rating request process
    
    logger.info(`Transaction ${transaction.id} marked as completed`);
    
    // Notify both parties
    // In a real implementation, this would connect to a notification service
  } catch (error) {
    logger.error(`Error handling transaction completion for ${transaction.id}:`, error);
    // Don't throw, just log the error
  }
}

/**
 * Handle new transaction notification
 * 
 * @param {Object} transaction The new transaction
 */
async function _notifyTransactionCreation(transaction) {
  try {
    // Notify seller about new transaction
    // In a real implementation, this would connect to a notification service
    
    // Notify buyer about transaction creation
    // In a real implementation, this would connect to a notification service
    
    logger.info(`New transaction ${transaction.id} created, notifications sent`);
  } catch (error) {
    logger.error(`Error notifying about new transaction ${transaction.id}:`, error);
    // Don't throw, just log the error
  }
}

module.exports = {
  getTransaction,
  getTransactionByCheckoutRequestId,
  updateTransaction,
  createTransaction,
  getUserTransactions
};
