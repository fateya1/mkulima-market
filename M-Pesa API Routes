// MkulimaMarket M-Pesa API Routes
// This module implements the Express routes for interacting with the M-Pesa integration

const express = require('express');
const router = express.Router();
const mpesaService = require('../services/mpesa-service');
const transactionService = require('../services/transaction-service'); // For updating transaction records
const { validatePaymentRequest, validateEscrowRequest } = require('../middleware/validators');
const { authenticateUser, authorizeTransaction } = require('../middleware/auth');
const logger = require('../utils/logger');

/**
 * Initiate STK Push payment
 * Used by buyers to pay farmers directly
 */
router.post('/payment/stk', 
  authenticateUser, 
  validatePaymentRequest, 
  async (req, res) => {
    try {
      const { phoneNumber, amount, transactionId, description } = req.body;
      
      // Check if the transaction exists and is valid
      const transaction = await transactionService.getTransaction(transactionId);
      
      if (!transaction) {
        return res.status(404).json({ 
          success: false, 
          message: 'Transaction not found' 
        });

/**
 * B2C payment timeout callback
 * This is called by M-Pesa when a B2C payment times out
 */
router.post('/callback/b2c/timeout', 
  async (req, res) => {
    try {
      const callbackData = req.body;
      
      logger.warn(`Received B2C timeout callback:`, JSON.stringify(callbackData));
      
      // Extract the necessary information
      const { requestId, conversationId, originatorConversationId } = callbackData;
      
      // Find the related transaction or escrow
      const redis = require('../utils/redis');
      const keys = await redis.keys('escrow:*');
      
      for (const key of keys) {
        const data = JSON.parse(await redis.get(key));
        if (data.releaseConversationId === conversationId) {
          // Update escrow status
          data.status = 'release_failed';
          data.releaseFailureReason = 'timeout';
          data.updatedAt = new Date().toISOString();
          
          // Save updated escrow
          await redis.setex(
            key,
            604800, // 7 days
            JSON.stringify(data)
          );
          
          // Update related transaction (but don't mark it as complete)
          await transactionService.updateTransaction(data.transactionId, {
            sellerPaymentStatus: 'failed',
            sellerPaymentFailureReason: 'Payment processing timeout'
          });
          
          logger.warn(`Escrow payment release timed out for escrow ID: ${data.escrowId}`);
          break;
        }
      }
      
      // Always return success to M-Pesa to acknowledge receipt
      res.status(200).json({ ResultCode: 0, ResultDesc: "Accepted" });
      
    } catch (error) {
      logger.error('B2C timeout callback processing error:', error);
      // Still return success to M-Pesa so they don't retry
      res.status(200).json({ ResultCode: 0, ResultDesc: "Accepted" });
    }
});

/**
 * Create escrow payment
 * Used for transactions where funds should be held until delivery confirmation
 */
router.post('/payment/escrow', 
  authenticateUser, 
  validateEscrowRequest, 
  authorizeTransaction,
  async (req, res) => {
    try {
      const { transactionId, phoneNumber } = req.body;
      
      // Get the transaction
      const transaction = await transactionService.getTransaction(transactionId);
      
      if (!transaction) {
        return res.status(404).json({ 
          success: false, 
          message: 'Transaction not found' 
        });
      }
      
      // Create escrow payment
      const escrowResult = await mpesaService.createEscrowPayment({
        transactionId,
        buyerPhone: phoneNumber,
        sellerPhone: transaction.sellerPhone,
        amount: transaction.totalAmount,
        releaseCondition: 'delivery_confirmation'
      });
      
      // Update transaction with escrow information
      await transactionService.updateTransaction(transactionId, {
        isEscrow: true,
        escrowId: escrowResult.escrowId,
        paymentStatus: 'escrow_initiated',
        checkoutRequestId: escrowResult.checkoutRequestId,
        paymentInitiatedAt: new Date()
      });
      
      res.status(200).json({
        success: true,
        message: 'Escrow payment initiated successfully',
        data: {
          escrowId: escrowResult.escrowId,
          checkoutRequestId: escrowResult.checkoutRequestId,
          status: escrowResult.status
        }
      });
      
    } catch (error) {
      logger.error('Escrow payment initiation error:', error);
      res.status(500).json({
        success: false,
        message: 'Failed to initiate escrow payment',
        error: error.message
      });
    }
});

/**
 * Release escrow payment
 * Called when delivery is confirmed to release payment to seller
 */
router.post('/payment/escrow/:escrowId/release', 
  authenticateUser, 
  async (req, res) => {
    try {
      const { escrowId } = req.params;
      const { releaseAuthorization } = req.body;
      
      // Verify user is authorized to release this escrow
      // In a real implementation, this would check if the user is the buyer
      // or a platform administrator
      
      // Get the escrow record
      const redis = require('../utils/redis');
      const escrowDataJson = await redis.get(`escrow:${escrowId}`);
      
      if (!escrowDataJson) {
        return res.status(404).json({ 
          success: false, 
          message: 'Escrow record not found' 
        });
      }
      
      const escrowData = JSON.parse(escrowDataJson);
      
      // Get the transaction
      const transaction = await transactionService.getTransaction(escrowData.transactionId);
      
      if (!transaction) {
        return res.status(404).json({ 
          success: false, 
          message: 'Transaction not found' 
        });
      }
      
      // Ensure the user is the buyer or an admin
      if (transaction.buyerId !== req.user.id && req.user.role !== 'admin') {
        return res.status(403).json({ 
          success: false, 
          message: 'Not authorized to release this escrow payment' 
        });
      }
      
      // Release the escrow payment
      const releaseResult = await mpesaService.releaseEscrowPayment(escrowId, releaseAuthorization);
      
      // Update transaction status
      await transactionService.updateTransaction(transaction.id, {
        paymentStatus: 'completed',
        sellerPaymentStatus: 'initiated',
        escrowStatus: 'release_initiated'
      });
      
      res.status(200).json({
        success: true,
        message: 'Escrow payment release initiated successfully',
        data: {
          escrowId,
          status: releaseResult.status,
          conversationId: releaseResult.conversationId
        }
      });
      
    } catch (error) {
      logger.error('Escrow release error:', error);
      res.status(500).json({
        success: false,
        message: 'Failed to release escrow payment',
        error: error.message
      });
    }
});

/**
 * Get escrow status
 */
router.get('/payment/escrow/:escrowId', 
  authenticateUser, 
  async (req, res) => {
    try {
      const { escrowId } = req.params;
      
      // Get the escrow record
      const redis = require('../utils/redis');
      const escrowDataJson = await redis.get(`escrow:${escrowId}`);
      
      if (!escrowDataJson) {
        return res.status(404).json({ 
          success: false, 
          message: 'Escrow record not found' 
        });
      }
      
      const escrowData = JSON.parse(escrowDataJson);
      
      // Get the transaction
      const transaction = await transactionService.getTransaction(escrowData.transactionId);
      
      if (!transaction) {
        return res.status(404).json({ 
          success: false, 
          message: 'Transaction not found' 
        });
      }
      
      // Ensure the user is involved in this transaction
      if (transaction.buyerId !== req.user.id && 
          transaction.sellerId !== req.user.id && 
          req.user.role !== 'admin') {
        return res.status(403).json({ 
          success: false, 
          message: 'Not authorized to view this escrow' 
        });
      }
      
      // Return escrow status
      res.status(200).json({
        success: true,
        data: {
          escrowId,
          status: escrowData.status,
          transactionId: escrowData.transactionId,
          amount: escrowData.amount,
          createdAt: escrowData.createdAt,
          updatedAt: escrowData.updatedAt || escrowData.createdAt
        }
      });
      
    } catch (error) {
      logger.error('Escrow status check error:', error);
      res.status(500).json({
        success: false,
        message: 'Failed to check escrow status',
        error: error.message
      });
    }
});

module.exports = router;
      }
      
      // Ensure the user is the buyer in this transaction
      if (transaction.buyerId !== req.user.id) {
        return res.status(403).json({ 
          success: false, 
          message: 'Not authorized to make payment for this transaction' 
        });
      }
      
      // Check transaction status
      if (transaction.paymentStatus !== 'pending') {
        return res.status(400).json({ 
          success: false, 
          message: `Invalid transaction status: ${transaction.paymentStatus}` 
        });
      }
      
      // Prepare the callback URL with the transaction ID
      const callbackUrl = `${process.env.API_BASE_URL}/api/payments/mpesa/callback/stk/${transactionId}`;
      
      // Initiate the STK push
      const result = await mpesaService.initiateSTKPush({
        phoneNumber,
        amount,
        accountReference: transactionId,
        description: description || `Payment for ${transaction.productName}`,
        callbackUrl
      });
      
      // Update transaction with payment initiation details
      await transactionService.updateTransaction(transactionId, {
        paymentStatus: 'initiated',
        paymentMethod: 'mpesa',
        checkoutRequestId: result.CheckoutRequestID,
        paymentInitiatedAt: new Date()
      });
      
      res.status(200).json({
        success: true,
        message: 'Payment initiated successfully',
        data: {
          checkoutRequestId: result.CheckoutRequestID,
          merchantRequestId: result.MerchantRequestID
        }
      });
      
    } catch (error) {
      logger.error('Payment initiation error:', error);
      res.status(500).json({
        success: false,
        message: 'Failed to initiate payment',
        error: error.message
      });
    }
});

/**
 * Check STK transaction status
 */
router.get('/payment/stk/status/:checkoutRequestId', 
  authenticateUser, 
  async (req, res) => {
    try {
      const { checkoutRequestId } = req.params;
      
      // Get the transaction by checkoutRequestId
      const transaction = await transactionService.getTransactionByCheckoutRequestId(checkoutRequestId);
      
      // Check if the transaction exists
      if (!transaction) {
        return res.status(404).json({ 
          success: false, 
          message: 'Transaction not found for this checkout request' 
        });
      }
      
      // Ensure the user is involved in this transaction
      if (transaction.buyerId !== req.user.id && transaction.sellerId !== req.user.id) {
        return res.status(403).json({ 
          success: false, 
          message: 'Not authorized to check this transaction' 
        });
      }
      
      // Check the status from M-Pesa
      const result = await mpesaService.verifySTKTransaction(checkoutRequestId);
      
      // Parse the result
      const isSuccessful = result.ResultCode === 0;
      let status = 'pending';
      
      if (result.ResultCode === 0) {
        status = 'completed';
      } else if (result.ResultCode === 1032) {
        status = 'cancelled'; // Transaction cancelled by user
      } else {
        status = 'failed';
      }
      
      // Update transaction if status has changed
      if (status !== 'pending' && transaction.paymentStatus === 'initiated') {
        await transactionService.updateTransaction(transaction.id, {
          paymentStatus: status,
          paymentCompletedAt: status === 'completed' ? new Date() : null,
          paymentFailureReason: status === 'failed' ? result.ResultDesc : null
        });
      }
      
      res.status(200).json({
        success: true,
        data: {
          transactionId: transaction.id,
          checkoutRequestId,
          status,
          resultCode: result.ResultCode,
          resultDesc: result.ResultDesc
        }
      });
      
    } catch (error) {
      logger.error('Payment status check error:', error);
      res.status(500).json({
        success: false,
        message: 'Failed to check payment status',
        error: error.message
      });
    }
});

/**
 * STK callback endpoint
 * This is called by M-Pesa after STK push completion
 */
router.post('/callback/stk/:transactionId', 
  async (req, res) => {
    try {
      const { transactionId } = req.params;
      const callbackData = req.body;
      
      logger.info(`Received STK callback for transaction ${transactionId}:`, 
        JSON.stringify(callbackData));
      
      // Process the callback
      const processedData = await mpesaService.processSTKCallback(callbackData);
      
      // Get the transaction
      const transaction = await transactionService.getTransaction(transactionId);
      
      if (!transaction) {
        logger.error(`Transaction not found for ID: ${transactionId}`);
        // Still return success to M-Pesa so they don't retry
        return res.status(200).json({ ResultCode: 0, ResultDesc: "Accepted" });
      }
      
      // Update transaction status based on callback result
      if (processedData.success) {
        // Payment successful
        await transactionService.updateTransaction(transactionId, {
          paymentStatus: 'completed',
          paymentCompletedAt: new Date(),
          mpesaReceiptNumber: processedData.metadata?.MpesaReceiptNumber || null,
          paymentAmount: processedData.metadata?.Amount || transaction.totalAmount
        });
        
        // If this was an escrow payment, update escrow status
        if (transaction.isEscrow) {
          await mpesaService.updateEscrowAfterPayment(
            processedData.checkoutRequestId, 
            true
          );
        }
        
        // Notify both buyer and seller about successful payment
        // This would connect to a notification service in a real implementation
        logger.info(`Payment successful for transaction ${transactionId}`);
      } else {
        // Payment failed
        await transactionService.updateTransaction(transactionId, {
          paymentStatus: 'failed',
          paymentFailureReason: processedData.resultDesc
        });
        
        // If this was an escrow payment, update escrow status
        if (transaction.isEscrow) {
          await mpesaService.updateEscrowAfterPayment(
            processedData.checkoutRequestId, 
            false
          );
        }
        
        logger.warn(`Payment failed for transaction ${transactionId}: ${processedData.resultDesc}`);
      }
      
      // Always return success to M-Pesa to acknowledge receipt
      res.status(200).json({ ResultCode: 0, ResultDesc: "Accepted" });
      
    } catch (error) {
      logger.error('STK callback processing error:', error);
      // Still return success to M-Pesa so they don't retry
      res.status(200).json({ ResultCode: 0, ResultDesc: "Accepted" });
    }
});

/**
 * B2C payment result callback
 * This is called by M-Pesa after B2C payment completion
 */
router.post('/callback/b2c/result', 
  async (req, res) => {
    try {
      const callbackData = req.body;
      
      logger.info(`Received B2C result callback:`, JSON.stringify(callbackData));
      
      // Process the callback
      const processedData = await mpesaService.processB2CCallback(callbackData);
      
      // Find the related transaction or escrow (in a real implementation, this would be a DB lookup)
      // For this example, we're assuming the OriginatorConversationID contains a transaction reference
      
      // If this was an escrow payment release, update the escrow record
      if (processedData.success && processedData.conversationId) {
        // Find the escrow by conversationId
        // This would be a database query in a real implementation
        const keys = await redisClient.keys('escrow:*');
        for (const key of keys) {
          const data = JSON.parse(await redisClient.get(key));
          if (data.releaseConversationId === processedData.
