// src/users/entities/user.entity.ts - Base user entity
import { 
  Entity, 
  Column, 
  PrimaryGeneratedColumn, 
  CreateDateColumn, 
  UpdateDateColumn,
  OneToMany,
  OneToOne,
  JoinColumn
} from 'typeorm';
import { Exclude } from 'class-transformer';
import { UserType } from '../enums/user-type.enum';
import { VerificationLevel } from '../enums/verification-level.enum';
import { UserStatus } from '../enums/user-status.enum';

@Entity('users')
export class User {
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @Column({ unique: true })
  phoneNumber: string;

  @Column({ nullable: true })
  email: string;

  @Column()
  fullName: string;

  @Column({ 
    type: 'enum', 
    enum: UserType, 
    default: UserType.FARMER 
  })
  userType: UserType;

  @Column({ 
    type: 'enum', 
    enum: VerificationLevel, 
    default: VerificationLevel.BASIC 
  })
  verificationLevel: VerificationLevel;

  @Column({ nullable: true, unique: true })
  firebaseUid: string;

  @Exclude()
  @Column({ nullable: true })
  passwordHash: string;

  @Column({ nullable: true })
  locationId: string;

  @Column({ default: 0 })
  profileCompletionPercent: number;

  @Column({ default: false })
  termsAccepted: boolean;

  @Column({ default: false })
  marketingOptIn: boolean;

  @Column({ 
    type: 'enum', 
    enum: UserStatus,
    default: UserStatus.ACTIVE 
  })
  status: UserStatus;

  @Column({ default: 'en' })
  languagePreference: string;

  @CreateDateColumn()
  registrationDate: Date;

  @Column({ nullable: true })
  lastActive: Date;

  @UpdateDateColumn()
  updatedAt: Date;
}

// src/users/entities/farmer-profile.entity.ts - Farmer specific profile
import { 
  Entity, 
  Column, 
  PrimaryGeneratedColumn, 
  OneToOne, 
  JoinColumn
} from 'typeorm';
import { User } from './user.entity';

@Entity('farmer_profiles')
export class FarmerProfile {
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @Column()
  userId: string;

  @OneToOne(() => User)
  @JoinColumn({ name: 'userId' })
  user: User;

  @Column({ type: 'decimal', precision: 10, scale: 2, nullable: true })
  farmSize: number;

  @Column({ nullable: true })
  farmSizeUnit: string;

  @Column({ type: 'text', nullable: true })
  farmDescription: string;

  @Column({ type: 'jsonb', nullable: true })
  primaryCrops: any;

  @Column({ type: 'jsonb', nullable: true })
  typicalVolume: any;

  @Column({ type: 'jsonb', nullable: true })
  harvestSeasons: any;

  @Column({ nullable: true })
  cooperativeId: string;

  @Column({ type: 'jsonb', nullable: true })
  farmingPractices: any;

  @Column({ type: 'jsonb', nullable: true })
  certifications: any;

  @Column({ nullable: true })
  profileImageUrl: string;

  @Column({ default: false })
  hasStorage: boolean;

  @Column({ default: false })
  hasTransportation: boolean;

  @Column({ nullable: true })
  yearsFarming: number;
}

// src/users/entities/buyer-profile.entity.ts - Buyer specific profile
import { 
  Entity, 
  Column, 
  PrimaryGeneratedColumn, 
  OneToOne, 
  JoinColumn
} from 'typeorm';
import { User } from './user.entity';
import { BusinessType } from '../enums/business-type.enum';
import { PurchasingFrequency } from '../enums/purchasing-frequency.enum';

@Entity('buyer_profiles')
export class BuyerProfile {
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @Column()
  userId: string;

  @OneToOne(() => User)
  @JoinColumn({ name: 'userId' })
  user: User;

  @Column()
  businessName: string;

  @Column({ 
    type: 'enum', 
    enum: BusinessType 
  })
  businessType: BusinessType;

  @Column({ nullable: true })
  businessRegistrationNumber: string;

  @Column({ nullable: true })
  taxId: string;

  @Column({ type: 'jsonb', nullable: true })
  typicalPurchaseVolume: any;

  @Column({ type: 'jsonb', nullable: true })
  preferredProducts: any;

  @Column({ type: 'text', nullable: true })
  paymentTerms: string;

  @Column({ type: 'text', nullable: true })
  businessDescription: string;

  @Column({ nullable: true })
  logoUrl: string;

  @Column({ type: 'jsonb', nullable: true })
  verificationDocuments: any;

  @Column({ 
    type: 'enum', 
    enum: PurchasingFrequency,
    nullable: true 
  })
  purchasingFrequency: PurchasingFrequency;
}

// src/users/entities/transporter-profile.entity.ts - Transporter specific profile
import { 
  Entity, 
  Column, 
  PrimaryGeneratedColumn, 
  OneToOne, 
  JoinColumn
} from 'typeorm';
import { User } from './user.entity';
import { VehicleType } from '../enums/vehicle-type.enum';

@Entity('transporter_profiles')
export class TransporterProfile {
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @Column()
  userId: string;

  @OneToOne(() => User)
  @JoinColumn({ name: 'userId' })
  user: User;

  @Column({ 
    type: 'enum', 
    enum: VehicleType 
  })
  vehicleType: VehicleType;

  @Column({ type: 'decimal', precision: 10, scale: 2 })
  vehicleCapacity: number;

  @Column()
  capacityUnit: string;

  @Column({ nullable: true })
  licenseNumber: string;

  @Column({ type: 'jsonb' })
  serviceAreas: any;

  @Column({ type: 'jsonb', nullable: true })
  availability: any;

  @Column({ type: 'jsonb', nullable: true })
  rateStructure: any;

  @Column({ type: 'jsonb', nullable: true })
  insuranceInfo: any;

  @Column({ type: 'jsonb', nullable: true })
  verificationDocuments: any;
}

// src/users/entities/location.entity.ts - Location entity for users
import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';
import { LocationType } from '../enums/location-type.enum';

@Entity('locations')
export class Location {
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @Column()
  userId: string;

  @Column({ 
    type: 'enum', 
    enum: LocationType 
  })
  locationType: LocationType;

  @Column({ type: 'text', nullable: true })
  addressDescription: string;

  @Column({ nullable: true })
  county: string;

  @Column({ nullable: true })
  subCounty: string;

  @Column({ nullable: true })
  ward: string;

  @Column({ type: 'decimal', precision: 10, scale: 8, nullable: true })
  latitude: number;

  @Column({ type: 'decimal', precision: 11, scale: 8, nullable: true })
  longitude: number;

  @Column({ type: 'geography', nullable: true })
  geofence: string;

  @Column({ default: true })
  isPrimary: boolean;

  @CreateDateColumn()
  createdAt: Date;

  @UpdateDateColumn()
  updatedAt: Date;
}

// src/users/enums/user-type.enum.ts
export enum UserType {
  FARMER = 'farmer',
  BUYER = 'buyer',
  TRANSPORTER = 'transporter',
  ADMIN = 'admin'
}

// src/users/enums/verification-level.enum.ts
export enum VerificationLevel {
  BASIC = 'basic',
  STANDARD = 'standard',
  ENHANCED = 'enhanced'
}

// src/users/enums/user-status.enum.ts
export enum UserStatus {
  ACTIVE = 'active',
  INACTIVE = 'inactive',
  SUSPENDED = 'suspended'
}

// src/users/enums/business-type.enum.ts
export enum BusinessType {
  INDIVIDUAL = 'individual',
  COMPANY = 'company',
  INSTITUTION = 'institution',
  EXPORTER = 'exporter'
}

// src/users/enums/purchasing-frequency.enum.ts
export enum PurchasingFrequency {
  DAILY = 'daily',
  WEEKLY = 'weekly',
  MONTHLY = 'monthly',
  SEASONAL = 'seasonal'
}

// src/users/enums/vehicle-type.enum.ts
export enum VehicleType {
  MOTORCYCLE = 'motorcycle',
  PICKUP = 'pickup',
  TRUCK = 'truck',
  VAN = 'van'
}

// src/users/enums/location-type.enum.ts
export enum LocationType {
  FARM = 'farm',
  BUSINESS = 'business',
  MARKET = 'market',
  COLLECTION_POINT = 'collection_point'
}

// src/users/dtos/create-user.dto.ts
import { IsString, IsEnum, IsOptional, IsBoolean, Length, IsEmail, Matches, IsNotEmpty } from 'class-validator';
import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';
import { UserType } from '../enums/user-type.enum';

export class CreateUserDto {
  @ApiProperty({ description: 'User phone number', example: '+254712345678' })
  @IsNotEmpty()
  @Matches(/^\+254\d{9}$/, { message: 'Phone number must be in format +254XXXXXXXXX' })
  phoneNumber: string;

  @ApiPropertyOptional({ description: 'User email address' })
  @IsOptional()
  @IsEmail()
  email?: string;

  @ApiProperty({ description: 'User full name' })
  @IsString()
  @Length(3, 100)
  fullName: string;

  @ApiProperty({ 
    description: 'User type', 
    enum: UserType, 
    default: UserType.FARMER 
  })
  @IsEnum(UserType)
  userType: UserType;

  @ApiPropertyOptional({ description: 'Password' })
  @IsOptional()
  @IsString()
  @Length(8, 50)
  password?: string;

  @ApiPropertyOptional({ description: 'Firebase UID for authentication' })
  @IsOptional()
  @IsString()
  firebaseUid?: string;

  @ApiPropertyOptional({ 
    description: 'Preferred language', 
    default: 'en', 
    enum: ['en', 'sw'] 
  })
  @IsOptional()
  @IsString()
  languagePreference?: string;

  @ApiPropertyOptional({ description: 'Terms and conditions accepted', default: false })
  @IsOptional()
  @IsBoolean()
  termsAccepted?: boolean;

  @ApiPropertyOptional({ description: 'Marketing opt-in', default: false })
  @IsOptional()
  @IsBoolean()
  marketingOptIn?: boolean;
}

// src/users/dtos/create-farmer-profile.dto.ts
import { IsString, IsOptional, IsNumber, IsUUID, IsBoolean, Min, IsObject } from 'class-validator';
import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';

export class CreateFarmerProfileDto {
  @ApiProperty({ description: 'Farm size in numerical value' })
  @IsOptional()
  @IsNumber()
  @Min(0)
  farmSize?: number;

  @ApiProperty({ description: 'Farm size unit (acres, hectares)' })
  @IsOptional()
  @IsString()
  farmSizeUnit?: string;

  @ApiPropertyOptional({ description: 'Farm description' })
  @IsOptional()
  @IsString()
  farmDescription?: string;

  @ApiPropertyOptional({ description: 'Primary crops produced' })
  @IsOptional()
  @IsObject()
  primaryCrops?: any;

  @ApiPropertyOptional({ description: 'Typical production volume' })
  @IsOptional()
  @IsObject()
  typicalVolume?: any;

  @ApiPropertyOptional({ description: 'Harvest seasons information' })
  @IsOptional()
  @IsObject()
  harvestSeasons?: any;

  @ApiPropertyOptional({ description: 'Cooperative ID if member of a cooperative' })
  @IsOptional()
  @IsUUID()
  cooperativeId?: string;

  @ApiPropertyOptional({ description: 'Farming practices information' })
  @IsOptional()
  @IsObject()
  farmingPractices?: any;

  @ApiPropertyOptional({ description: 'Certifications information' })
  @IsOptional()
  @IsObject()
  certifications?: any;

  @ApiPropertyOptional({ description: 'Has storage facilities' })
  @IsOptional()
  @IsBoolean()
  hasStorage?: boolean;

  @ApiPropertyOptional({ description: 'Has transportation capabilities' })
  @IsOptional()
  @IsBoolean()
  hasTransportation?: boolean;

  @ApiPropertyOptional({ description: 'Years of farming experience' })
  @IsOptional()
  @IsNumber()
  @Min(0)
  yearsFarming?: number;
}

// src/users/dtos/create-buyer-profile.dto.ts
import { IsString, IsEnum, IsOptional, IsUUID, Length, IsObject } from 'class-validator';
import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';
import { BusinessType } from '../enums/business-type.enum';
import { PurchasingFrequency } from '../enums/purchasing-frequency.enum';

export class CreateBuyerProfileDto {
  @ApiProperty({ description: 'Business name' })
  @IsString()
  @Length(2, 100)
  businessName: string;

  @ApiProperty({ 
    description: 'Business type', 
    enum: BusinessType
  })
  @IsEnum(BusinessType)
  businessType: BusinessType;

  @ApiPropertyOptional({ description: 'Business registration number' })
  @IsOptional()
  @IsString()
  businessRegistrationNumber?: string;

  @ApiPropertyOptional({ description: 'Tax ID' })
  @IsOptional()
  @IsString()
  taxId?: string;

  @ApiPropertyOptional({ description: 'Typical purchase volume information' })
  @IsOptional()
  @IsObject()
  typicalPurchaseVolume?: any;

  @ApiPropertyOptional({ description: 'Preferred products information' })
  @IsOptional()
  @IsObject()
  preferredProducts?: any;

  @ApiPropertyOptional({ description: 'Payment terms' })
  @IsOptional()
  @IsString()
  paymentTerms?: string;

  @ApiPropertyOptional({ description: 'Business description' })
  @IsOptional()
  @IsString()
  businessDescription?: string;

  @ApiPropertyOptional({ 
    description: 'Purchasing frequency', 
    enum: PurchasingFrequency 
  })
  @IsOptional()
  @IsEnum(PurchasingFrequency)
  purchasingFrequency?: PurchasingFrequency;
}

// src/users/dtos/create-transporter-profile.dto.ts
import { IsString, IsEnum, IsNumber, IsOptional, Min, IsObject } from 'class-validator';
import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';
import { VehicleType } from '../enums/vehicle-type.enum';

export class CreateTransporterProfileDto {
  @ApiProperty({ 
    description: 'Vehicle type', 
    enum: VehicleType 
  })
  @IsEnum(VehicleType)
  vehicleType: VehicleType;

  @ApiProperty({ description: 'Vehicle capacity value' })
  @IsNumber()
  @Min(0)
  vehicleCapacity: number;

  @ApiProperty({ description: 'Capacity unit (kg, tons, etc)' })
  @IsString()
  capacityUnit: string;

  @ApiPropertyOptional({ description: 'License number' })
  @IsOptional()
  @IsString()
  licenseNumber?: string;

  @ApiProperty({ description: 'Service areas information' })
  @IsObject()
  serviceAreas: any;

  @ApiPropertyOptional({ description: 'Availability schedule' })
  @IsOptional()
  @IsObject()
  availability?: any;

  @ApiPropertyOptional({ description: 'Rate structure information' })
  @IsOptional()
  @IsObject()
  rateStructure?: any;

  @ApiPropertyOptional({ description: 'Insurance information' })
  @IsOptional()
  @IsObject()
  insuranceInfo?: any;
}

// src/users/dtos/create-location.dto.ts
import { IsString, IsEnum, IsOptional, IsNumber, IsBoolean, IsLatitude, IsLongitude } from 'class-validator';
import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';
import { LocationType } from '../enums/location-type.enum';

export class CreateLocationDto {
  @ApiProperty({ 
    description: 'Location type', 
    enum: LocationType 
  })
  @IsEnum(LocationType)
  locationType: LocationType;

  @ApiPropertyOptional({ description: 'Address description' })
  @IsOptional()
  @IsString()
  addressDescription?: string;

  @ApiPropertyOptional({ description: 'County name' })
  @IsOptional()
  @IsString()
  county?: string;

  @ApiPropertyOptional({ description: 'Sub-county name' })
  @IsOptional()
  @IsString()
  subCounty?: string;

  @ApiPropertyOptional({ description: 'Ward name' })
  @IsOptional()
  @IsString()
  ward?: string;

  @ApiPropertyOptional({ description: 'Latitude coordinate' })
  @IsOptional()
  @IsLatitude()
  latitude?: number;

  @ApiPropertyOptional({ description: 'Longitude coordinate' })
  @IsOptional()
  @IsLongitude()
  longitude?: number;

  @ApiPropertyOptional({ description: 'Is primary location', default: true })
  @IsOptional()
  @IsBoolean()
  isPrimary?: boolean;
}

// src/users/services/users.service.ts
import { Injectable, ConflictException, NotFoundException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import * as bcrypt from 'bcrypt';
import { User } from '../entities/user.entity';
import { FarmerProfile } from '../entities/farmer-profile.entity';
import { BuyerProfile } from '../entities/buyer-profile.entity';
import { TransporterProfile } from '../entities/transporter-profile.entity';
import { Location } from '../entities/location.entity';
import { CreateUserDto } from '../dtos/create-user.dto';
import { CreateFarmerProfileDto } from '../dtos/create-farmer-profile.dto';
import { CreateBuyerProfileDto } from '../dtos/create-buyer-profile.dto';
import { CreateTransporterProfileDto } from '../dtos/create-transporter-profile.dto';
import { CreateLocationDto } from '../dtos/create-location.dto';
import { UserType } from '../enums/user-type.enum';

@Injectable()
export class UsersService {
  constructor(
    @InjectRepository(User)
    private usersRepository: Repository<User>,
    
    @InjectRepository(FarmerProfile)
    private farmerProfileRepository: Repository<FarmerProfile>,
    
    @InjectRepository(BuyerProfile)
    private buyerProfileRepository: Repository<BuyerProfile>,
    
    @InjectRepository(TransporterProfile)
    private transporterProfileRepository: Repository<TransporterProfile>,
    
    @InjectRepository(Location)
    private locationRepository: Repository<Location>,
  ) {}

  // Find a user by ID
  async findById(id: string): Promise<User> {
    const user = await this.usersRepository.findOne({ where: { id } });
    if (!user) {
      throw new NotFoundException(`User with ID ${id} not found`);
    }
    return user;
  }

  // Find a user by phone number
  async findByPhoneNumber(phoneNumber: string): Promise<User> {
    return this.usersRepository.findOne({ where: { phoneNumber } });
  }

  // Create a new user
  async create(createUserDto: CreateUserDto): Promise<User> {
    // Check if phone number already exists
    const existingUser = await this.findByPhoneNumber(createUserDto.phoneNumber);
    if (existingUser) {
      throw new ConflictException('Phone number already registered');
    }

    const user = this.usersRepository.create(createUserDto);

    // Hash password if provided
    if (createUserDto.password) {
      user.passwordHash = await bcrypt.hash(createUserDto.password, 10);
    }

    // Save the user
    return this.usersRepository.save(user);
  }

  // Create farmer profile
  async createFarmerProfile(userId: string, createFarmerProfileDto: CreateFarmerProfileDto): Promise<FarmerProfile> {
    // Ensure user exists and is a farmer
    const user = await this.findById(userId);
    if (user.userType !== UserType.FARMER) {
      throw new ConflictException('User is not registered as a farmer');
    }

    // Check if profile already exists
    const existingProfile = await this.farmerProfileRepository.findOne({ where: { userId } });
    if (existingProfile) {
      throw new ConflictException('Farmer profile already exists for this user');
    }

    // Create and save the profile
    const farmerProfile = this.farmerProfileRepository.create({
      userId,
      ...createFarmerProfileDto
    });

    // Update profile completion percentage
    await this.updateProfileCompletionPercentage(userId);

    return this.farmerProfileRepository.save(farmerProfile);
  }

  // Create buyer profile
  async createBuyerProfile(userId: string, createBuyerProfileDto: CreateBuyerProfileDto): Promise<BuyerProfile> {
    // Ensure user exists and is a buyer
    const user = await this.findById(userId);
    if (user.userType !== UserType.BUYER) {
      throw new ConflictException('User is not registered as a buyer');
    }

    // Check if profile already exists
    const existingProfile = await this.buyerProfileRepository.findOne({ where: { userId } });
    if (existingProfile) {
      throw new ConflictException('Buyer profile already exists for this user');
    }

    // Create and save the profile
    const buyerProfile = this.buyerProfileRepository.create({
      userId,
      ...createBuyerProfileDto
    });

    // Update profile completion percentage
    await this.updateProfileCompletionPercentage(userId);

    return this.buyerProfileRepository.save(buyerProfile);
  }

  // Create transporter profile
  async createTransporterProfile(userId: string, createTransporterProfileDto: CreateTransporterProfileDto): Promise<TransporterProfile> {
    // Ensure user exists and is a transporter
    const user = await this.findById(userId);
    if (user.userType !== UserType.TRANSPORTER) {
      throw new ConflictException('User is not registered as a transporter');
    }

    // Check if profile already exists
    const existingProfile = await this.transporterProfileRepository.findOne({ where: { userId } });
    if (existingProfile) {
      throw new ConflictException('Transporter profile already exists for this user');
    }

    // Create and save the profile
    const transporterProfile = this.transporterProfileRepository.create({
      userId,
      ...createTransporterProfileDto
    });

    // Update profile completion percentage
    await this.updateProfileCompletionPercentage(userId);

    return this.transporterProfileRepository.save(transporterProfile);
  }

  // Create a location for a user
  async createLocation(userId: string, createLocationDto: CreateLocationDto): Promise
