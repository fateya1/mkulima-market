import React, { useState, useEffect } from 'react';
import { X, AlertCircle, CheckCircle, Info, AlertTriangle } from 'lucide-react';

// Toast types with corresponding styles and icons
const TOAST_TYPES = {
  SUCCESS: {
    backgroundColor: 'bg-green-100',
    borderColor: 'border-green-500',
    textColor: 'text-green-800',
    icon: CheckCircle,
    iconColor: 'text-green-500'
  },
  ERROR: {
    backgroundColor: 'bg-red-100',
    borderColor: 'border-red-500',
    textColor: 'text-red-800',
    icon: AlertCircle,
    iconColor: 'text-red-500'
  },
  INFO: {
    backgroundColor: 'bg-blue-100',
    borderColor: 'border-blue-500',
    textColor: 'text-blue-800',
    icon: Info,
    iconColor: 'text-blue-500'
  },
  WARNING: {
    backgroundColor: 'bg-yellow-100',
    borderColor: 'border-yellow-500',
    textColor: 'text-yellow-800',
    icon: AlertTriangle,
    iconColor: 'text-yellow-500'
  }
};

// Individual Toast component
const Toast = ({ id, type, message, onClose, autoClose = true, duration = 5000 }) => {
  const { backgroundColor, borderColor, textColor, icon: Icon, iconColor } = TOAST_TYPES[type] || TOAST_TYPES.INFO;
  
  useEffect(() => {
    if (autoClose) {
      const timer = setTimeout(() => {
        onClose(id);
      }, duration);
      
      return () => clearTimeout(timer);
    }
  }, [id, onClose, autoClose, duration]);
  
  return (
    <div 
      className={`flex items-center p-4 mb-3 rounded-md border-l-4 shadow-md ${backgroundColor} ${borderColor} animate-fade-in`}
      role="alert"
    >
      <div className={`mr-3 ${iconColor}`}>
        <Icon size={20} />
      </div>
      <div className={`flex-grow ${textColor} text-sm font-medium`}>
        {message}
      </div>
      <button 
        onClick={() => onClose(id)} 
        className="ml-auto text-gray-400 hover:text-gray-600 focus:outline-none"
        aria-label="Close"
      >
        <X size={18} />
      </button>
    </div>
  );
};

// Toast Container component
const ToastContainer = ({ position = 'top-right' }) => {
  const [toasts, setToasts] = useState([]);
  
  // Position styles
  const positionStyles = {
    'top-right': 'top-4 right-4',
    'top-left': 'top-4 left-4',
    'bottom-right': 'bottom-4 right-4',
    'bottom-left': 'bottom-4 left-4',
    'top-center': 'top-4 left-1/2 transform -translate-x-1/2',
    'bottom-center': 'bottom-4 left-1/2 transform -translate-x-1/2'
  };
  
  // Add a new toast
  const addToast = (type, message, options = {}) => {
    const newToast = {
      id: Date.now(),
      type,
      message,
      ...options
    };
    
    setToasts(prevToasts => [newToast, ...prevToasts]);
    return newToast.id;
  };
  
  // Remove a toast by id
  const removeToast = (id) => {
    setToasts(prevToasts => prevToasts.filter(toast => toast.id !== id));
  };
  
  // Expose methods to the global window object for use outside of React components
  useEffect(() => {
    window.toastNotification = {
      success: (message, options) => addToast('SUCCESS', message, options),
      error: (message, options) => addToast('ERROR', message, options),
      info: (message, options) => addToast('INFO', message, options),
      warning: (message, options) => addToast('WARNING', message, options),
      remove: removeToast
    };
    
    return () => {
      delete window.toastNotification;
    };
  }, []);
  
  // If no toasts, don't render the container
  if (toasts.length === 0) {
    return null;
  }
  
  return (
    <div 
      className={`fixed z-50 ${positionStyles[position]} w-80 max-w-full`}
      aria-live="polite"
    >
      {toasts.map(toast => (
        <Toast 
          key={toast.id}
          {...toast}
          onClose={removeToast}
        />
      ))}
    </div>
  );
};

// Add static methods to the ToastContainer component for ease of use within React components
ToastContainer.success = (message, options) => {
  if (window.toastNotification) {
    return window.toastNotification.success(message, options);
  }
};

ToastContainer.error = (message, options) => {
  if (window.toastNotification) {
    return window.toastNotification.error(message, options);
  }
};

ToastContainer.info = (message, options) => {
  if (window.toastNotification) {
    return window.toastNotification.info(message, options);
  }
};

ToastContainer.warning = (message, options) => {
  if (window.toastNotification) {
    return window.toastNotification.warning(message, options);
  }
};

ToastContainer.remove = (id) => {
  if (window.toastNotification) {
    window.toastNotification.remove(id);
  }
};

export default ToastContainer;
