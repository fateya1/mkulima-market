// auth.middleware.js
// Authentication middleware for MkulimaMarket platform
// Handles JWT validation, role-based authorization, and offline authentication capabilities

const jwt = require('jsonwebtoken');
const { promisify } = require('util');
const Redis = require('redis');
const bcrypt = require('bcrypt');

// Configuration
const JWT_SECRET = process.env.JWT_SECRET || 'mkulima-development-secret'; // Use env variable in production
const JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || '7d'; // Longer token validity for rural users with intermittent connectivity
const REFRESH_TOKEN_EXPIRES_IN = process.env.REFRESH_TOKEN_EXPIRES_IN || '30d';
const TOKEN_ISSUER = 'mkulimamarket.co.ke';

// Initialize Redis client for token blacklisting (if available)
let redisClient;
try {
  redisClient = Redis.createClient({
    url: process.env.REDIS_URL,
    // Enable offline queue for intermittent connectivity
    enable_offline_queue: true,
  });
  
  redisClient.on('error', (err) => {
    console.warn('Redis connection error:', err);
    // Continue without Redis if unavailable
  });
} catch (error) {
  console.warn('Redis unavailable, continuing with local token validation');
}

/**
 * Generate authentication token for a user
 * @param {Object} user - User object containing id, role, and other properties
 * @returns {Object} - Object containing token and refresh token
 */
exports.generateTokens = async (user) => {
  // Create subset of user data for token payload
  const tokenPayload = {
    id: user.id,
    phone: user.phone_number,
    role: user.user_type,
    verification_level: user.verification_level || 'basic',
    iss: TOKEN_ISSUER
  };

  // Generate access token
  const token = jwt.sign(tokenPayload, JWT_SECRET, {
    expiresIn: JWT_EXPIRES_IN
  });

  // Generate refresh token with longer expiry
  const refreshToken = jwt.sign(
    { id: user.id, tokenVersion: user.token_version || 0 },
    JWT_SECRET,
    { expiresIn: REFRESH_TOKEN_EXPIRES_IN }
  );

  return { token, refreshToken };
};

/**
 * Verify user's token
 * @param {string} token - JWT token to verify
 * @returns {Promise<Object>} - Decoded token payload
 */
exports.verifyToken = async (token) => {
  try {
    return await promisify(jwt.verify)(token, JWT_SECRET);
  } catch (error) {
    throw new Error('Invalid token');
  }
};

/**
 * User authentication middleware
 * - Validates JWT token
 * - Checks against token blacklist if Redis is available
 * - Adds user data to request object
 */
exports.authenticate = async (req, res, next) => {
  try {
    // Get token from authorization header
    const authHeader = req.headers.authorization;
    let token;

    if (authHeader && authHeader.startsWith('Bearer ')) {
      token = authHeader.split(' ')[1];
    } else if (req.cookies && req.cookies.token) {
      // Also check for token in cookies for web clients
      token = req.cookies.token;
    }

    if (!token) {
      return res.status(401).json({
        status: 'error',
        message: 'Authentication required'
      });
    }

    // Verify token
    const decoded = await exports.verifyToken(token);

    // Check if token is blacklisted (if Redis is available)
    if (redisClient && redisClient.connected) {
      const isBlacklisted = await promisify(redisClient.get).bind(redisClient)(`bl_${token}`);
      if (isBlacklisted) {
        return res.status(401).json({
          status: 'error',
          message: 'Token is no longer valid'
        });
      }
    }

    // Add user data to request object
    req.user = decoded;
    
    next();
  } catch (error) {
    return res.status(401).json({
      status: 'error',
      message: error.message || 'Authentication failed'
    });
  }
};

/**
 * Role-based authorization middleware
 * @param {string[]} roles - Array of roles allowed to access the resource
 * @returns {Function} - Express middleware function
 */
exports.authorize = (roles) => {
  return (req, res, next) => {
    if (!req.user) {
      return res.status(401).json({
        status: 'error',
        message: 'Authentication required'
      });
    }

    if (!roles.includes(req.user.role)) {
      return res.status(403).json({
        status: 'error',
        message: 'You do not have permission to perform this action'
      });
    }

    next();
  };
};

/**
 * Verification level authorization middleware
 * @param {string[]} levels - Array of verification levels allowed to access the resource
 * @returns {Function} - Express middleware function
 */
exports.verificationLevel = (levels) => {
  return (req, res, next) => {
    if (!req.user) {
      return res.status(401).json({
        status: 'error',
        message: 'Authentication required'
      });
    }

    if (!levels.includes(req.user.verification_level)) {
      return res.status(403).json({
        status: 'error',
        message: 'This action requires a higher verification level'
      });
    }

    next();
  };
};

/**
 * Logout by blacklisting the current token
 * @param {string} token - JWT token to blacklist
 * @returns {Promise<boolean>} - Success status
 */
exports.logout = async (token) => {
  try {
    const decoded = await exports.verifyToken(token);
    const expirationTime = decoded.exp - Math.floor(Date.now() / 1000);

    // If Redis is available, blacklist the token
    if (redisClient && redisClient.connected) {
      await promisify(redisClient.set).bind(redisClient)(
        `bl_${token}`,
        'blacklisted',
        'EX',
        expirationTime
      );
    }

    return true;
  } catch (error) {
    console.error('Logout error:', error);
    return false;
  }
};

/**
 * Refresh token middleware
 * Issues a new access token using a valid refresh token
 */
exports.refreshToken = async (req, res) => {
  try {
    const { refreshToken } = req.body;

    if (!refreshToken) {
      return res.status(400).json({
        status: 'error',
        message: 'Refresh token is required'
      });
    }

    // Verify refresh token
    const decoded = await promisify(jwt.verify)(refreshToken, JWT_SECRET);

    // In a production environment, we would verify the token version against the database
    // For demonstration purposes, we'll just issue a new token

    // Get user from database - simplified, in production fetch from database
    const user = {
      id: decoded.id,
      phone_number: decoded.phone || '',
      user_type: decoded.role || 'farmer',
      verification_level: decoded.verification_level || 'basic',
      token_version: decoded.tokenVersion || 0
    };

    // Generate new tokens
    const tokens = await exports.generateTokens(user);

    return res.status(200).json({
      status: 'success',
      data: {
        token: tokens.token,
        refreshToken: tokens.refreshToken
      }
    });
  } catch (error) {
    return res.status(401).json({
      status: 'error',
      message: 'Invalid refresh token'
    });
  }
};

/**
 * Offline authentication support
 * Validates locally stored credentials when online authentication is not possible
 * To be used in the client application for basic offline features
 */
exports.validateOfflineCredentials = async (storedHash, password) => {
  try {
    return await bcrypt.compare(password, storedHash);
  } catch (error) {
    return false;
  }
};

/**
 * Generate secure hash for local device storage
 * Used for minimal offline authentication on mobile devices
 */
exports.generateOfflineHash = async (password) => {
  return await bcrypt.hash(password, 10);
};

/**
 * Extend token validity during connectivity issues
 * For use in special circumstances when token is expiring and connectivity is unstable
 */
exports.extendTokenValidity = async (req, res) => {
  try {
    const { token } = req.body;
    
    if (!token) {
      return res.status(400).json({
        status: 'error',
        message: 'Token is required'
      });
    }

    // Verify current token
    const decoded = await exports.verifyToken(token);
    
    // Check if token is eligible for extension (e.g., about to expire)
    const currentTime = Math.floor(Date.now() / 1000);
    const timeRemaining = decoded.exp - currentTime;
    
    // Only extend if token is close to expiry (less than 1 day)
    if (timeRemaining > 86400) {
      return res.status(400).json({
        status: 'error',
        message: 'Token is not eligible for extension yet'
      });
    }
    
    // Create a new token with extended validity
    const newToken = jwt.sign(
      {
        id: decoded.id,
        phone: decoded.phone,
        role: decoded.role,
        verification_level: decoded.verification_level,
        iss: TOKEN_ISSUER,
        // Add emergency extension flag for tracking
        emergency_extension: true
      },
      JWT_SECRET,
      { expiresIn: JWT_EXPIRES_IN }
    );
    
    return res.status(200).json({
      status: 'success',
      data: {
        token: newToken
      }
    });
  } catch (error) {
    return res.status(401).json({
      status: 'error',
      message: 'Invalid token'
    });
  }
};

// Export the module for use in the application
module.exports = exports;
