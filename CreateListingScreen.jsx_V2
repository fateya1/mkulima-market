import React, { useState, useEffect } from 'react';
import { 
  ChevronLeft, 
  Camera, 
  MapPin, 
  Calendar, 
  Tag, 
  Truck, 
  CheckCircle, 
  Image as ImageIcon,
  Info
} from 'lucide-react';

const CreateListingScreen = ({ onBack, onSubmit }) => {
  // Multi-step form state
  const [step, setStep] = useState(1);
  const [formData, setFormData] = useState({
    productCategory: '',
    productName: '',
    quantity: '',
    unit: 'kg',
    quality: '',
    price: '',
    isNegotiable: false,
    locationDescription: '',
    exactLocation: true,
    availableFrom: '',
    availableUntil: '',
    images: [],
    description: ''
  });
  
  // Product categories based on documentation
  const productCategories = [
    { id: 'maize', name: 'Maize', icon: '🌽' },
    { id: 'beans', name: 'Beans', icon: '🥜' },
    { id: 'potatoes', name: 'Potatoes', icon: '🥔' },
    { id: 'tomatoes', name: 'Tomatoes', icon: '🍅' },
    { id: 'vegetables', name: 'Vegetables', icon: '🥬' },
    { id: 'fruits', name: 'Fruits', icon: '🍎' },
    { id: 'dairy', name: 'Dairy', icon: '🥛' },
    { id: 'poultry', name: 'Poultry', icon: '🐔' }
  ];
  
  // Units of measurement
  const units = [
    { id: 'kg', name: 'Kilograms (kg)' },
    { id: 'bags', name: 'Bags' },
    { id: 'crates', name: 'Crates' },
    { id: 'bunches', name: 'Bunches' },
    { id: 'pieces', name: 'Pieces' }
  ];
  
  // Quality grades
  const qualityGrades = [
    { id: 'premium', name: 'Premium Grade', description: 'Top quality, meets export standards' },
    { id: 'standard', name: 'Standard Grade', description: 'Good quality for local markets' },
    { id: 'economy', name: 'Economy Grade', description: 'Acceptable quality with minor defects' }
  ];
  
  // Handle form field changes
  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData({
      ...formData,
      [name]: type === 'checkbox' ? checked : value
    });
  };
  
  // Handle image upload
  const handleImageUpload = (e) => {
    // In a real app, this would handle file uploads
    // For this example, we'll simulate image selection
    if (e.target.files && e.target.files.length > 0) {
      const newImages = [...formData.images];
      // Limit to 3 images
      for (let i = 0; i < Math.min(e.target.files.length, 3 - formData.images.length); i++) {
        newImages.push(URL.createObjectURL(e.target.files[i]));
      }
      
      setFormData({
        ...formData,
        images: newImages
      });
    }
  };
  
  // Navigate to next step
  const handleNext = () => {
    setStep(step + 1);
  };
  
  // Navigate to previous step
  const handlePrevious = () => {
    setStep(step - 1);
  };
  
  // Submit form
  const handleSubmit = () => {
    onSubmit && onSubmit(formData);
  };
  
  // Get current market price reference
  const getCurrentMarketPrice = () => {
    // This would fetch from an API in a real application
    const prices = {
      'maize': { price: '40-45', unit: 'kg' },
      'beans': { price: '120-140', unit: 'kg' },
      'potatoes': { price: '35-45', unit: 'kg' },
      'tomatoes': { price: '80-120', unit: 'kg' },
      'vegetables': { price: '30-50', unit: 'kg' },
      'fruits': { price: '60-90', unit: 'kg' },
      'dairy': { price: '65-75', unit: 'liter' },
      'poultry': { price: '450-550', unit: 'piece' }
    };
    
    return formData.productCategory ? prices[formData.productCategory] : null;
  };
  
  // Market price reference
  const marketPrice = getCurrentMarketPrice();
  
  // Step 1: Basic Product Details
  const renderStep1 = () => (
    <div className="space-y-6">
      <div className="space-y-2">
        <label className="block text-sm font-medium text-gray-700">
          Select Product Category
        </label>
        <div className="grid grid-cols-2 gap-3 sm:grid-cols-4">
          {productCategories.map(category => (
            <button
              key={category.id}
              type="button"
              className={`flex flex-col items-center justify-center p-4 border rounded-lg hover:bg-gray-50 ${
                formData.productCategory === category.id ? 'border-green-500 bg-green-50' : 'border-gray-200'
              }`}
              onClick={() => setFormData({...formData, productCategory: category.id})}
            >
              <span className="text-2xl mb-2">{category.icon}</span>
              <span className="text-sm font-medium text-gray-900">{category.name}</span>
            </button>
          ))}
        </div>
      </div>
      
      <div className="space-y-2">
        <label htmlFor="productName" className="block text-sm font-medium text-gray-700">
          Product Name
        </label>
        <input
          type="text"
          id="productName"
          name="productName"
          value={formData.productName}
          onChange={handleChange}
          placeholder="e.g., Fresh Maize, Sukuma Wiki"
          className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-green-500 focus:border-green-500"
        />
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div className="space-y-2">
          <label htmlFor="quantity" className="block text-sm font-medium text-gray-700">
            Quantity
          </label>
          <input
            type="number"
            id="quantity"
            name="quantity"
            value={formData.quantity}
            onChange={handleChange}
            placeholder="Amount available"
            className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-green-500 focus:border-green-500"
          />
        </div>
        
        <div className="space-y-2">
          <label htmlFor="unit" className="block text-sm font-medium text-gray-700">
            Unit
          </label>
          <select
            id="unit"
            name="unit"
            value={formData.unit}
            onChange={handleChange}
            className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-green-500 focus:border-green-500"
          >
            {units.map(unit => (
              <option key={unit.id} value={unit.id}>{unit.name}</option>
            ))}
          </select>
        </div>
      </div>
      
      <div className="flex justify-end">
        <button
          type="button"
          onClick={handleNext}
          disabled={!formData.productCategory || !formData.productName || !formData.quantity}
          className="px-4 py-2 bg-green-600 text-white rounded-md shadow-sm hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 disabled:bg-gray-300 disabled:cursor-not-allowed"
        >
          Continue
        </button>
      </div>
    </div>
  );
  
  // Step 2: Quality and Price
  const renderStep2 = () => (
    <div className="space-y-6">
      <div className="space-y-2">
        <label className="block text-sm font-medium text-gray-700">
          Product Quality
        </label>
        <div className="space-y-3">
          {qualityGrades.map(grade => (
            <div
              key={grade.id}
              className={`flex items-start p-3 border rounded-lg hover:bg-gray-50 cursor-pointer ${
                formData.quality === grade.id ? 'border-green-500 bg-green-50' : 'border-gray-200'
              }`}
              onClick={() => setFormData({...formData, quality: grade.id})}
            >
              <div className="flex-shrink-0">
                {formData.quality === grade.id ? (
                  <CheckCircle className="h-5 w-5 text-green-500" />
                ) : (
                  <div className="h-5 w-5 border-2 border-gray-300 rounded-full" />
                )}
              </div>
              <div className="ml-3">
                <h3 className="text-sm font-medium text-gray-900">{grade.name}</h3>
                <p className="text-sm text-gray-500">{grade.description}</p>
              </div>
            </div>
          ))}
        </div>
      </div>
      
      <div className="space-y-2">
        <label htmlFor="price" className="block text-sm font-medium text-gray-700">
          Price (KES per {formData.unit})
        </label>
        <input
          type="number"
          id="price"
          name="price"
          value={formData.price}
          onChange={handleChange}
          placeholder="Enter price"
          className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-green-500 focus:border-green-500"
        />
        
        {marketPrice && (
          <div className="mt-1 flex items-center">
            <Info className="h-4 w-4 text-blue-500 mr-1" />
            <span className="text-xs text-blue-600">
              Current market price: KES {marketPrice.price} per {marketPrice.unit}
            </span>
          </div>
        )}
      </div>
      
      <div className="flex items-center">
        <input
          type="checkbox"
          id="isNegotiable"
          name="isNegotiable"
          checked={formData.isNegotiable}
          onChange={handleChange}
          className="h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded"
        />
        <label htmlFor="isNegotiable" className="ml-2 block text-sm text-gray-700">
          Price is negotiable
        </label>
      </div>
      
      <div className="space-y-2">
        <label htmlFor="description" className="block text-sm font-medium text-gray-700">
          Additional Description (Optional)
        </label>
        <textarea
          id="description"
          name="description"
          value={formData.description}
          onChange={handleChange}
          rows={3}
          placeholder="Add details about your product quality, harvest date, etc."
          className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-green-500 focus:border-green-500"
        />
      </div>
      
      <div className="flex justify-between">
        <button
          type="button"
          onClick={handlePrevious}
          className="px-4 py-2 border border-gray-300 text-gray-700 rounded-md shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
        >
          Back
        </button>
        <button
          type="button"
          onClick={handleNext}
          disabled={!formData.quality || !formData.price}
          className="px-4 py-2 bg-green-600 text-white rounded-md shadow-sm hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 disabled:bg-gray-300 disabled:cursor-not-allowed"
        >
          Continue
        </button>
      </div>
    </div>
  );
  
  // Step 3: Location and Availability
  const renderStep3 = () => (
    <div className="space-y-6">
      <div className="space-y-2">
        <label className="block text-sm font-medium text-gray-700">
          Product Location
        </label>
        <div className="relative">
          <div className="flex items-center p-3 border border-gray-300 rounded-md shadow-sm focus-within:ring-1 focus-within:ring-green-500 focus-within:border-green-500">
            <MapPin className="h-5 w-5 text-gray-400 mr-2" />
            <input
              type="text"
              name="locationDescription"
              value={formData.locationDescription}
              onChange={handleChange}
              placeholder="Enter your location"
              className="block w-full border-0 p-0 focus:ring-0 text-gray-900 placeholder-gray-500 sm:text-sm"
            />
          </div>
        </div>
        <div className="mt-2 flex items-center">
          <input
            type="checkbox"
            id="exactLocation"
            name="exactLocation"
            checked={formData.exactLocation}
            onChange={handleChange}
            className="h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded"
          />
          <label htmlFor="exactLocation" className="ml-2 block text-sm text-gray-700">
            Show exact location to buyers
          </label>
        </div>
        <p className="text-xs text-gray-500 mt-1">
          If unchecked, only your general area will be shown for privacy
        </p>
      </div>
      
      <div className="space-y-2">
        <label className="block text-sm font-medium text-gray-700">
          Product Availability
        </label>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-1">
            <label htmlFor="availableFrom" className="block text-xs text-gray-500">
              Available From
            </label>
            <div className="relative">
              <div className="flex items-center p-3 border border-gray-300 rounded-md shadow-sm focus-within:ring-1 focus-within:ring-green-500 focus-within:border-green-500">
                <Calendar className="h-5 w-5 text-gray-400 mr-2" />
                <input
                  type="date"
                  id="availableFrom"
                  name="availableFrom"
                  value={formData.availableFrom}
                  onChange={handleChange}
                  className="block w-full border-0 p-0 focus:ring-0 text-gray-900 sm:text-sm"
                />
              </div>
            </div>
          </div>
          
          <div className="space-y-1">
            <label htmlFor="availableUntil" className="block text-xs text-gray-500">
              Available Until
            </label>
            <div className="relative">
              <div className="flex items-center p-3 border border-gray-300 rounded-md shadow-sm focus-within:ring-1 focus-within:ring-green-500 focus-within:border-green-500">
                <Calendar className="h-5 w-5 text-gray-400 mr-2" />
                <input
                  type="date"
                  id="availableUntil"
                  name="availableUntil"
                  value={formData.availableUntil}
                  onChange={handleChange}
                  className="block w-full border-0 p-0 focus:ring-0 text-gray-900 sm:text-sm"
                />
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <div className="flex justify-between">
        <button
          type="button"
          onClick={handlePrevious}
          className="px-4 py-2 border border-gray-300 text-gray-700 rounded-md shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
        >
          Back
        </button>
        <button
          type="button"
          onClick={handleNext}
          disabled={!formData.locationDescription || !formData.availableFrom}
          className="px-4 py-2 bg-green-600 text-white rounded-md shadow-sm hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 disabled:bg-gray-300 disabled:cursor-not-allowed"
        >
          Continue
        </button>
      </div>
    </div>
  );
  
  // Step 4: Photos & Review
  const renderStep4 = () => (
    <div className="space-y-6">
      <div className="space-y-2">
        <label className="block text-sm font-medium text-gray-700">
          Add Product Photos
        </label>
        <p className="text-xs text-gray-500">
          Good quality photos will help buyers make faster decisions
        </p>
        
        <div className="grid grid-cols-3 gap-3 mt-2">
          {Array(3).fill(0).map((_, index) => (
            <div 
              key={index} 
              className={`h-24 flex items-center justify-center border-2 border-dashed rounded-lg ${
                index < formData.images.length ? 'border-green-500' : 'border-gray-300'
              }`}
            >
              {index < formData.images.length ? (
                <img 
                  src={formData.images[index]} 
                  alt={`Product ${index + 1}`} 
                  className="h-full w-full object-cover rounded-lg"
                />
              ) : (
                <div className="text-center p-2">
                  <ImageIcon className="mx-auto h-6 w-6 text-gray-400" />
                  <span className="block text-xs text-gray-500 mt-1">Photo {index + 1}</span>
                </div>
              )}
            </div>
          ))}
        </div>
        
        <div className="mt-3">
          <label
            htmlFor="image-upload"
            className="flex items-center justify-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
          >
            <Camera className="h-5 w-5 mr-2 text-gray-500" />
            {formData.images.length === 0 ? 'Add Photos' : 'Change Photos'}
          </label>
          <input 
            id="image-upload" 
            name="images" 
            type="file" 
            multiple 
            accept="image/*"
            onChange={handleImageUpload}
            className="sr-only"
          />
        </div>
      </div>
      
      <div className="space-y-2">
        <h3 className="text-sm font-medium text-gray-700">Review Your Listing</h3>
        <div className="bg-gray-50 p-4 rounded-lg border border-gray-200">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <p className="text-xs text-gray-500">Product</p>
              <p className="text-sm font-medium">
                {formData.productName || '(Not specified)'}
              </p>
            </div>
            <div>
              <p className="text-xs text-gray-500">Quantity</p>
              <p className="text-sm font-medium">
                {formData.quantity} {units.find(u => u.id === formData.unit)?.name || formData.unit}
              </p>
            </div>
            <div>
              <p className="text-xs text-gray-500">Quality</p>
              <p className="text-sm font-medium">
                {qualityGrades.find(q => q.id === formData.quality)?.name || '(Not specified)'}
              </p>
            </div>
            <div>
              <p className="text-xs text-gray-500">Price</p>
              <p className="text-sm font-medium">
                KES {formData.price} per {formData.unit} {formData.isNegotiable ? '(Negotiable)' : ''}
              </p>
            </div>
            <div>
              <p className="text-xs text-gray-500">Location</p>
              <p className="text-sm font-medium">
                {formData.locationDescription || '(Not specified)'}
              </p>
            </div>
            <div>
              <p className="text-xs text-gray-500">Availability</p>
              <p className="text-sm font-medium">
                {formData.availableFrom ? (
                  <>From {new Date(formData.availableFrom).toLocaleDateString()}</>
                ) : '(Not specified)'}
              </p>
            </div>
          </div>
        </div>
      </div>
      
      <div className="flex justify-between">
        <button
          type="button"
          onClick={handlePrevious}
          className="px-4 py-2 border border-gray-300 text-gray-700 rounded-md shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
        >
          Back
        </button>
        <button
          type="button"
          onClick={handleSubmit}
          className="px-4 py-2 bg-green-600 text-white rounded-md shadow-sm hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
        >
          Submit Listing
        </button>
      </div>
    </div>
  );
  
  return (
    <div className="bg-white min-h-screen">
      <div className="max-w-3xl mx-auto px-4 py-6">
        {/* Header */}
        <div className="flex items-center mb-6">
          <button
            type="button"
            onClick={onBack}
            className="mr-2 flex items-center justify-center h-10 w-10 rounded-full hover:bg-gray-100"
          >
            <ChevronLeft className="h-5 w-5" />
          </button>
          <h1 className="text-xl font-bold text-gray-900">Create Listing</h1>
        </div>
        
        {/* Progress Steps */}
        <div className="mb-8">
          <div className="flex justify-between">
            {[1, 2, 3, 4].map((stepNumber) => (
              <div key={stepNumber} className="flex flex-col items-center">
                <div className={`flex items-center justify-center w-8 h-8 rounded-full font-medium ${
                  step === stepNumber
                    ? 'bg-green-600 text-white'
                    : step > stepNumber
                    ? 'bg-green-100 text-green-600'
                    : 'bg-gray-200 text-gray-500'
                }`}>
                  {stepNumber}
                </div>
                <span className="mt-1 text-xs text-gray-500">
                  {stepNumber === 1 && 'Details'}
                  {stepNumber === 2 && 'Quality & Price'}
                  {stepNumber === 3 && 'Location'}
                  {stepNumber === 4 && 'Photos'}
                </span>
              </div>
            ))}
          </div>
          <div className="mt-2 flex justify-between">
            <div className="h-1 bg-green-600" style={{ width: `${((step - 1) / 3) * 100}%` }} />
            <div className="h-1 bg-gray-200" style={{ width: `${((4 - step) / 3) * 100}%` }} />
          </div>
        </div>
        
        {/* Step Content */}
        <div className="bg-white rounded-lg">
          {step === 1 && renderStep1()}
          {step === 2 && renderStep2()}
          {step === 3 && renderStep3()}
          {step === 4 && renderStep4()}
        </div>
      </div>
    </div>
  );
};

export default CreateListingScreen;
