// listingsApi.js - API service for managing product listings

/**
 * API service for handling product listings
 * Implements the functionality described in the MkulimaMarket platform
 */
class ListingsApi {
  constructor(baseUrl = 'https://api.mkulimamarket.co.ke/v1') {
    this.baseUrl = baseUrl;
    this.endpoints = {
      listings: `${baseUrl}/listings`,
      products: `${baseUrl}/products`,
      locations: `${baseUrl}/users/locations`,
      categories: `${baseUrl}/products/categories`,
      marketPrices: `${baseUrl}/market-prices`,
    };
  }

  /**
   * Get all product categories
   * @returns {Promise} Promise with product categories
   */
  async getProductCategories() {
    try {
      const response = await fetch(this.endpoints.categories);
      if (!response.ok) {
        throw new Error(`Failed to fetch categories: ${response.status}`);
      }
      return await response.json();
    } catch (error) {
      console.error('Error fetching product categories:', error);
      throw error;
    }
  }

  /**
   * Get products by category ID
   * @param {string} categoryId - ID of the product category
   * @returns {Promise} Promise with products in the category
   */
  async getProductsByCategory(categoryId) {
    try {
      const response = await fetch(`${this.endpoints.products}?category_id=${categoryId}`);
      if (!response.ok) {
        throw new Error(`Failed to fetch products: ${response.status}`);
      }
      return await response.json();
    } catch (error) {
      console.error('Error fetching products by category:', error);
      throw error;
    }
  }

  /**
   * Get current market prices for a product
   * @param {string} productId - ID of the product
   * @param {string} locationId - Optional location ID for regional prices
   * @returns {Promise} Promise with market price information
   */
  async getMarketPrices(productId, locationId = null) {
    try {
      let url = `${this.endpoints.marketPrices}?product_id=${productId}`;
      if (locationId) {
        url += `&location_id=${locationId}`;
      }
      
      const response = await fetch(url);
      if (!response.ok) {
        throw new Error(`Failed to fetch market prices: ${response.status}`);
      }
      return await response.json();
    } catch (error) {
      console.error('Error fetching market prices:', error);
      throw error;
    }
  }

  /**
   * Create a new product listing
   * @param {Object} listingData - Data for the new listing
   * @returns {Promise} Promise with the created listing
   */
  async createListing(listingData) {
    try {
      const response = await fetch(this.endpoints.listings, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.getAuthToken()}`
        },
        body: JSON.stringify(listingData)
      });
      
      if (!response.ok) {
        const error = await response.json();
        throw new Error(`Failed to create listing: ${error.message || response.status}`);
      }
      
      return await response.json();
    } catch (error) {
      console.error('Error creating listing:', error);
      throw error;
    }
  }

  /**
   * Upload photos for a listing
   * @param {string} listingId - ID of the listing 
   * @param {FileList|File[]} photos - Photos to upload
   * @returns {Promise} Promise with upload results
   */
  async uploadListingPhotos(listingId, photos) {
    try {
      const formData = new FormData();
      Array.from(photos).forEach((photo, index) => {
        formData.append(`photo_${index}`, photo);
      });
      
      const response = await fetch(`${this.endpoints.listings}/${listingId}/photos`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.getAuthToken()}`
        },
        body: formData
      });
      
      if (!response.ok) {
        throw new Error(`Failed to upload photos: ${response.status}`);
      }
      
      return await response.json();
    } catch (error) {
      console.error('Error uploading listing photos:', error);
      throw error;
    }
  }

  /**
   * Get user's locations
   * @returns {Promise} Promise with user locations
   */
  async getUserLocations() {
    try {
      const response = await fetch(this.endpoints.locations, {
        headers: {
          'Authorization': `Bearer ${this.getAuthToken()}`
        }
      });
      
      if (!response.ok) {
        throw new Error(`Failed to fetch locations: ${response.status}`);
      }
      
      return await response.json();
    } catch (error) {
      console.error('Error fetching user locations:', error);
      throw error;
    }
  }

  /**
   * Get auth token from storage
   * @returns {string} Authentication token
   */
  getAuthToken() {
    return localStorage.getItem('mkulima_auth_token');
  }

  /**
   * Get a specific listing by ID
   * @param {string} id - Listing ID
   * @returns {Promise} Promise with listing details
   */
  async getListing(id) {
    try {
      const response = await fetch(`${this.endpoints.listings}/${id}`, {
        headers: {
          'Authorization': `Bearer ${this.getAuthToken()}`
        }
      });
      
      if (!response.ok) {
        throw new Error(`Failed to fetch listing: ${response.status}`);
      }
      
      return await response.json();
    } catch (error) {
      console.error('Error fetching listing:', error);
      throw error;
    }
  }

  /**
   * Update an existing listing
   * @param {string} id - Listing ID
   * @param {Object} updateData - Updated listing data
   * @returns {Promise} Promise with updated listing
   */
  async updateListing(id, updateData) {
    try {
      const response = await fetch(`${this.endpoints.listings}/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.getAuthToken()}`
        },
        body: JSON.stringify(updateData)
      });
      
      if (!response.ok) {
        throw new Error(`Failed to update listing: ${response.status}`);
      }
      
      return await response.json();
    } catch (error) {
      console.error('Error updating listing:', error);
      throw error;
    }
  }
}

// Create a singleton instance
const listingsApiInstance = new ListingsApi();

export default listingsApiInstance;
