// Validation Middleware for MkulimaMarket API
// This module contains validation middleware for API requests

const Joi = require('joi');
const logger = require('../utils/logger');

/**
 * Validate payment request data
 */
function validatePaymentRequest(req, res, next) {
  // Define validation schema
  const schema = Joi.object({
    phoneNumber: Joi.string()
      .pattern(/^2547\d{8}$/)
      .required()
      .messages({
        'string.pattern.base': 'Phone number must be in format 2547XXXXXXXX',
        'any.required': 'Phone number is required'
      }),
    
    amount: Joi.number()
      .min(1)
      .required()
      .messages({
        'number.min': 'Amount must be greater than 0',
        'any.required': 'Amount is required'
      }),
    
    transactionId: Joi.string()
      .required()
      .messages({
        'any.required': 'Transaction ID is required'
      }),
    
    description: Joi.string()
      .max(100)
      .optional()
  });
  
  // Validate request
  const { error, value } = schema.validate(req.body);
  
  if (error) {
    logger.warn('Payment validation error:', error.details);
    return res.status(400).json({
      success: false,
      message: 'Invalid request data',
      errors: error.details.map(detail => detail.message)
    });
  }
  
  // Validation passed, continue
  req.body = value;
  next();
}

/**
 * Validate escrow request data
 */
function validateEscrowRequest(req, res, next) {
  // Define validation schema
  const schema = Joi.object({
    phoneNumber: Joi.string()
      .pattern(/^2547\d{8}$/)
      .required()
      .messages({
        'string.pattern.base': 'Phone number must be in format 2547XXXXXXXX',
        'any.required': 'Phone number is required'
      }),
    
    transactionId: Joi.string()
      .required()
      .messages({
        'any.required': 'Transaction ID is required'
      }),
    
    releaseCondition: Joi.string()
      .valid('delivery_confirmation', 'quality_verification', 'time_based')
      .default('delivery_confirmation')
      .optional(),
    
    description: Joi.string()
      .max(100)
      .optional()
  });
  
  // Validate request
  const { error, value } = schema.validate(req.body);
  
  if (error) {
    logger.warn('Escrow validation error:', error.details);
    return res.status(400).json({
      success: false,
      message: 'Invalid request data',
      errors: error.details.map(detail => detail.message)
    });
  }
  
  // Validation passed, continue
  req.body = value;
  next();
}

/**
 * Validate transaction creation request
 */
function validateTransactionRequest(req, res, next) {
  // Define validation schema
  const schema = Joi.object({
    productId: Joi.string()
      .required()
      .messages({
        'any.required': 'Product ID is required'
      }),
    
    sellerId: Joi.string()
      .required()
      .messages({
        'any.required': 'Seller ID is required'
      }),
    
    quantity: Joi.number()
      .min(0.1)
      .required()
      .messages({
        'number.min': 'Quantity must be greater than 0',
        'any.required': 'Quantity is required'
      }),
    
    unit: Joi.string()
      .required()
      .messages({
        'any.required': 'Unit of measure is required'
      }),
    
    pricePerUnit: Joi.number()
      .min(0)
      .required()
      .messages({
        'number.min': 'Price per unit must be greater than or equal to 0',
        'any.required': 'Price per unit is required'
      }),
    
    totalAmount: Joi.number()
      .min(0)
      .required()
      .messages({
        'number.min': 'Total amount must be greater than or equal to 0',
        'any.required': 'Total amount is required'
      }),
    
    deliveryMethod: Joi.string()
      .valid('pickup', 'delivery')
      .required()
      .messages({
        'any.only': 'Delivery method must be either pickup or delivery',
        'any.required': 'Delivery method is required'
      }),
    
    transporterId: Joi.string()
      .optional(),
    
    transportFee: Joi.number()
      .min(0)
      .optional(),
    
    pickupLocationId: Joi.string()
      .when('deliveryMethod', {
        is: 'pickup',
        then: Joi.required(),
        otherwise: Joi.optional()
      }),
    
    deliveryLocationId: Joi.string()
      .when('deliveryMethod', {
        is: 'delivery',
        then: Joi.required(),
        otherwise: Joi.optional()
      }),
    
    scheduledDate: Joi.date()
      .min('now')
      .required()
      .messages({
        'date.min': 'Scheduled date must be in the future',
        'any.required': 'Scheduled date is required'
      }),
    
    isEscrow: Joi.boolean()
      .default(false)
      .optional(),
    
    notes: Joi.string()
      .max(500)
      .optional()
  });
  
  // Validate request
  const { error, value } = schema.validate(req.body);
  
  if (error) {
    logger.warn('Transaction validation error:', error.details);
    return res.status(400).json({
      success: false,
      message: 'Invalid request data',
      errors: error.details.map(detail => detail.message)
    });
  }
  
  // Additional validation logic
  if (value.totalAmount !== value.quantity * value.pricePerUnit) {
    return res.status(400).json({
      success: false,
      message: 'Invalid request data',
      errors: ['Total amount does not match quantity * pricePerUnit']
    });
  }
  
  // Validation passed, continue
  req.body = value;
  next();
}

/**
 * Validate escrow release request
 */
function validateEscrowReleaseRequest(req, res, next) {
  // Define validation schema
  const schema = Joi.object({
    releaseAuthorization: Joi.string()
      .required()
      .messages({
        'any.required': 'Release authorization is required'
      }),
    
    notes: Joi.string()
      .max(200)
      .optional()
  });
  
  // Validate request
  const { error, value } = schema.validate(req.body);
  
  if (error) {
    logger.warn('Escrow release validation error:', error.details);
    return res.status(400).json({
      success: false,
      message: 'Invalid request data',
      errors: error.details.map(detail => detail.message)
    });
  }
  
  // Validation passed, continue
  req.body = value;
  next();
}

module.exports = {
  validatePaymentRequest,
  validateEscrowRequest,
  validateTransactionRequest,
  validateEscrowReleaseRequest
};
