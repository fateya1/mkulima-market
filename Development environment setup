# docker-compose.yml
# Development environment setup for MkulimaMarket platform

version: '3.8'

services:
  # API Service
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mkulima-api
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/mkulimamarket
      - MONGODB_URI=mongodb://mongo:27017/mkulimamarket
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=dev_jwt_secret_replace_in_production
      - JWT_EXPIRES_IN=7d
      - REFRESH_TOKEN_EXPIRES_IN=30d
      - MPESA_CONSUMER_KEY=${MPESA_CONSUMER_KEY}
      - MPESA_CONSUMER_SECRET=${MPESA_CONSUMER_SECRET}
      - MPESA_SHORTCODE=${MPESA_SHORTCODE}
      - MPESA_PASSKEY=${MPESA_PASSKEY}
      - SMS_API_KEY=${SMS_API_KEY}
      - MAPS_API_KEY=${MAPS_API_KEY}
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - postgres
      - mongo
      - redis
    networks:
      - mkulima-network

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: mkulima-frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=http://localhost:3000/api
      - REACT_APP_MAPS_API_KEY=${MAPS_API_KEY}
    ports:
      - "3001:80"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - api
    networks:
      - mkulima-network

  # PostgreSQL Database
  postgres:
    image: postgres:14
    container_name: mkulima-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=mkulimamarket
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-scripts/postgres:/docker-entrypoint-initdb.d
    networks:
      - mkulima-network

  # MongoDB Database
  mongo:
    image: mongo:6
    container_name: mkulima-mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - mkulima-network

  # Redis Cache
  redis:
    image: redis:7
    container_name: mkulima-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mkulima-network

  # Elasticsearch (for Search)
  elasticsearch:
    image: elasticsearch:8.6.0
    container_name: mkulima-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - mkulima-network

  # MinIO for object storage (S3-compatible)
  minio:
    image: minio/minio
    container_name: mkulima-minio
    restart: unless-stopped
    environment:
      - MINIO_ROOT_USER=minio_access_key
      - MINIO_ROOT_PASSWORD=minio_secret_key
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - mkulima-network

  # Monitoring with Prometheus + Grafana
  prometheus:
    image: prom/prometheus
    container_name: mkulima-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - mkulima-network

  grafana:
    image: grafana/grafana
    container_name: mkulima-grafana
    restart: unless-stopped
    ports:
      - "3002:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - mkulima-network

  # Optional: SMS Gateway Simulator for Development
  sms-simulator:
    build:
      context: ./tools/sms-simulator
      dockerfile: Dockerfile
    container_name: mkulima-sms-simulator
    restart: unless-stopped
    ports:
      - "3003:3000"
    networks:
      - mkulima-network

  # Optional: M-Pesa API Simulator for Development
  mpesa-simulator:
    build:
      context: ./tools/mpesa-simulator
      dockerfile: Dockerfile
    container_name: mkulima-mpesa-simulator
    restart: unless-stopped
    ports:
      - "3004:3000"
    networks:
      - mkulima-network

volumes:
  postgres_data:
  mongo_data:
  redis_data:
  elasticsearch_data:
  minio_data:
  prometheus_data:
  grafana_data:

networks:
  mkulima-network:
    driver: bridge
