import { v4 as uuidv4 } from 'uuid';
import axios from 'axios';
import { API_BASE_URL } from '../config/constants';
import { storageService } from './storageService';
import i18n from './i18n';

// IndexedDB setup
const DB_NAME = 'mkulimaMarketOfflineDB';
const DB_VERSION = 1;
const SYNC_QUEUE_STORE = 'syncQueue';
const STORAGE_KEY = 'syncQueueStatus';
const MAX_RETRY_COUNT = 5;

/**
 * SyncQueueService handles offline transaction functionality for the MkulimaMarket platform
 * It queues operations while offline and syncs them when connectivity is restored
 * Critical for rural users with intermittent connectivity as highlighted in the project documentation
 */
class SyncQueueService {
  constructor() {
    this.db = null;
    this.isOnline = navigator.onLine;
    this.isSyncing = false;
    this.syncInProgress = false;
    this.pendingActions = 0;
    this.syncListeners = [];
    this.networkListeners = [];
    
    // Initialize IndexedDB
    this.initIndexedDB();
    
    // Set up network listeners
    this.setupNetworkListeners();
    
    // Set up queue status from persistent storage
    this.loadQueueStatus();
  }

  /**
   * Initialize IndexedDB database
   * @private
   */
  initIndexedDB() {
    const request = indexedDB.open(DB_NAME, DB_VERSION);
    
    request.onerror = (event) => {
      console.error('IndexedDB error:', event.target.error);
    };
    
    request.onupgradeneeded = (event) => {
      const db = event.target.result;
      
      // Create sync queue object store if it doesn't exist
      if (!db.objectStoreNames.contains(SYNC_QUEUE_STORE)) {
        const store = db.createObjectStore(SYNC_QUEUE_STORE, { keyPath: 'id' });
        
        // Create indexes for querying
        store.createIndex('status', 'status', { unique: false });
        store.createIndex('timestamp', 'timestamp', { unique: false });
        store.createIndex('retryCount', 'retryCount', { unique: false });
        store.createIndex('priority', 'priority', { unique: false });
      }
    };
    
    request.onsuccess = (event) => {
      this.db = event.target.result;
      
      // Count pending items on initialization
      this.countPendingActions().then(count => {
        this.pendingActions = count;
        this.notifySyncListeners();
      });
      
      // Try to sync if online
      if (this.isOnline) {
        this.attemptSync();
      }
    };
  }

  /**
   * Set up network status event listeners
   * @private
   */
  setupNetworkListeners() {
    window.addEventListener('online', () => {
      this.isOnline = true;
      this.notifyNetworkListeners();
      this.attemptSync();
    });
    
    window.addEventListener('offline', () => {
      this.isOnline = false;
      this.notifyNetworkListeners();
    });
  }

  /**
   * Load queue status from persistent storage
   * @private
   */
  loadQueueStatus() {
    const statusData = storageService.getItem(STORAGE_KEY);
    if (statusData) {
      try {
        const parsedData = JSON.parse(statusData);
        this.pendingActions = parsedData.pendingActions || 0;
      } catch (error) {
        console.error('Error parsing sync queue status:', error);
      }
    }
  }

  /**
   * Save queue status to persistent storage
   * @private
   */
  saveQueueStatus() {
    const statusData = {
      pendingActions: this.pendingActions,
      lastSync: new Date().toISOString()
    };
    storageService.setItem(STORAGE_KEY, JSON.stringify(statusData));
  }

  /**
   * Add a network status change listener
   * @param {Function} listener - Callback function that receives isOnline status
   * @returns {Function} - Function to remove the listener
   */
  addNetworkListener(listener) {
    this.networkListeners.push(listener);
    // Immediately notify with current status
    listener(this.isOnline);
    
    // Return function to remove listener
    return () => {
      this.networkListeners = this.networkListeners.filter(l => l !== listener);
    };
  }

  /**
   * Notify all network status listeners of changes
   * @private
   */
  notifyNetworkListeners() {
    for (const listener of this.networkListeners) {
      listener(this.isOnline);
    }
  }

  /**
   * Add a sync status change listener
   * @param {Function} listener - Callback function that receives sync status
   * @returns {Function} - Function to remove the listener
   */
  addSyncListener(listener) {
    this.syncListeners.push(listener);
    // Immediately notify with current status
    listener({
      pendingActions: this.pendingActions,
      isSyncing: this.syncInProgress
    });
    
    // Return function to remove listener
    return () => {
      this.syncListeners = this.syncListeners.filter(l => l !== listener);
    };
  }

  /**
   * Notify all sync status listeners of changes
   * @private
   */
  notifySyncListeners() {
    const status = {
      pendingActions: this.pendingActions,
      isSyncing: this.syncInProgress
    };
    
    for (const listener of this.syncListeners) {
      listener(status);
    }
    
    this.saveQueueStatus();
  }

  /**
   * Add an action to the sync queue
   * @param {string} endpoint - API endpoint for the action
   * @param {string} method - HTTP method (GET, POST, PUT, DELETE)
   * @param {Object} data - Data to send with the request
   * @param {number} priority - Priority level (higher numbers = higher priority)
   * @param {string} description - Human-readable description of the action
   * @returns {Promise<Object>} - The queued action object
   */
  async addToQueue(endpoint, method, data, priority = 1, description = '') {
    return new Promise((resolve, reject) => {
      if (!this.db) {
        reject(new Error('Database not initialized'));
        return;
      }
      
      // Create a new action object
      const action = {
        id: uuidv4(),
        endpoint,
        method,
        data,
        status: 'pending',
        timestamp: new Date().toISOString(),
        retryCount: 0,
        priority,
        description: description || `${method} ${endpoint}`,
        error: null
      };
      
      const transaction = this.db.transaction([SYNC_QUEUE_STORE], 'readwrite');
      const store = transaction.objectStore(SYNC_QUEUE_STORE);
      
      const request = store.add(action);
      
      request.onsuccess = () => {
        this.pendingActions++;
        this.notifySyncListeners();
        
        // Try to sync immediately if online
        if (this.isOnline && !this.syncInProgress) {
          this.attemptSync();
        }
        
        resolve(action);
      };
      
      request.onerror = (event) => {
        reject(new Error(`Error adding to sync queue: ${event.target.error}`));
      };
    });
  }

  /**
   * Perform an API action with offline support
   * @param {string} endpoint - API endpoint
   * @param {string} method - HTTP method
   * @param {Object} data - Request data
   * @param {Object} options - Additional options
   * @returns {Promise<Object>} - API response or queued action
   */
  async performAction(endpoint, method, data = {}, options = {}) {
    const {
      priority = 1,
      description = '',
      bypassQueue = false,
      headers = {}
    } = options;
    
    // If online and not forced to queue, try direct API call
    if (this.isOnline && !bypassQueue) {
      try {
        const response = await axios({
          url: `${API_BASE_URL}${endpoint}`,
          method,
          data: method !== 'GET' ? data : undefined,
          params: method === 'GET' ? data : undefined,
          headers
        });
        
        return {
          success: true,
        online: false,
        queued: true,
        action,
        message: i18n.t('offline.queuedActions')
      };
    } catch (error) {
      return {
        success: false,
        online: false,
        error: error.message
      };
    }
  }

  /**
   * Get all actions in the sync queue
   * @param {string} status - Filter by status (optional)
   * @returns {Promise<Array>} - List of queued actions
   */
  async getQueuedActions(status = null) {
    return new Promise((resolve, reject) => {
      if (!this.db) {
        reject(new Error('Database not initialized'));
        return;
      }
      
      const transaction = this.db.transaction([SYNC_QUEUE_STORE], 'readonly');
      const store = transaction.objectStore(SYNC_QUEUE_STORE);
      
      let request;
      if (status) {
        const index = store.index('status');
        request = index.getAll(status);
      } else {
        request = store.getAll();
      }
      
      request.onsuccess = () => {
        resolve(request.result);
      };
      
      request.onerror = (event) => {
        reject(new Error(`Error getting queued actions: ${event.target.error}`));
      };
    });
  }

  /**
   * Count pending actions in the sync queue
   * @returns {Promise<number>} - Number of pending actions
   */
  async countPendingActions() {
    return new Promise((resolve, reject) => {
      if (!this.db) {
        reject(new Error('Database not initialized'));
        return;
      }
      
      const transaction = this.db.transaction([SYNC_QUEUE_STORE], 'readonly');
      const store = transaction.objectStore(SYNC_QUEUE_STORE);
      const index = store.index('status');
      const request = index.count('pending');
      
      request.onsuccess = () => {
        resolve(request.result);
      };
      
      request.onerror = (event) => {
        reject(new Error(`Error counting pending actions: ${event.target.error}`));
      };
    });
  }

  /**
   * Update the status of an action in the queue
   * @param {string} id - Action ID
   * @param {string} status - New status
   * @param {Object} extraData - Additional data to update
   * @returns {Promise<void>}
   * @private
   */
  async updateActionStatus(id, status, extraData = {}) {
    return new Promise((resolve, reject) => {
      if (!this.db) {
        reject(new Error('Database not initialized'));
        return;
      }
      
      const transaction = this.db.transaction([SYNC_QUEUE_STORE], 'readwrite');
      const store = transaction.objectStore(SYNC_QUEUE_STORE);
      const request = store.get(id);
      
      request.onsuccess = () => {
        const action = request.result;
        if (!action) {
          reject(new Error(`Action with ID ${id} not found`));
          return;
        }
        
        // Update action status and any extra data
        action.status = status;
        action.lastUpdated = new Date().toISOString();
        
        // Merge in any extra data
        Object.assign(action, extraData);
        
        // Put updated action back in store
        const updateRequest = store.put(action);
        
        updateRequest.onsuccess = () => {
          resolve();
        };
        
        updateRequest.onerror = (event) => {
          reject(new Error(`Error updating action status: ${event.target.error}`));
        };
      };
      
      request.onerror = (event) => {
        reject(new Error(`Error getting action: ${event.target.error}`));
      };
    });
  }

  /**
   * Remove an action from the queue
   * @param {string} id - Action ID
   * @returns {Promise<void>}
   * @private
   */
  async removeAction(id) {
    return new Promise((resolve, reject) => {
      if (!this.db) {
        reject(new Error('Database not initialized'));
        return;
      }
      
      const transaction = this.db.transaction([SYNC_QUEUE_STORE], 'readwrite');
      const store = transaction.objectStore(SYNC_QUEUE_STORE);
      const request = store.delete(id);
      
      request.onsuccess = () => {
        resolve();
      };
      
      request.onerror = (event) => {
        reject(new Error(`Error removing action: ${event.target.error}`));
      };
    });
  }

  /**
   * Process a single action from the queue
   * @param {Object} action - Action to process
   * @returns {Promise<boolean>} - Success status
   * @private
   */
  async processAction(action) {
    try {
      // Make API request
      const response = await axios({
        url: `${API_BASE_URL}${action.endpoint}`,
        method: action.method,
        data: action.method !== 'GET' ? action.data : undefined,
        params: action.method === 'GET' ? action.data : undefined,
        headers: {
          'Content-Type': 'application/json',
          'X-Sync-ID': action.id // Include sync ID for server logging
        }
      });
      
      // Mark action as completed
      await this.updateActionStatus(action.id, 'completed', {
        response: {
          status: response.status,
          data: response.data
        }
      });
      
      this.pendingActions = Math.max(0, this.pendingActions - 1);
      this.notifySyncListeners();
      
      return true;
    } catch (error) {
      // Handle failed action
      const newRetryCount = action.retryCount + 1;
      const shouldRetry = newRetryCount <= MAX_RETRY_COUNT;
      
      await this.updateActionStatus(
        action.id,
        shouldRetry ? 'pending' : 'failed',
        {
          retryCount: newRetryCount,
          error: {
            message: error.message,
            status: error.response?.status,
            data: error.response?.data
          }
        }
      );
      
      // Only reduce pending count if we're not going to retry
      if (!shouldRetry) {
        this.pendingActions = Math.max(0, this.pendingActions - 1);
        this.notifySyncListeners();
      }
      
      return false;
    }
  }

  /**
   * Attempt to sync all pending actions
   * @returns {Promise<Object>} - Sync results
   */
  async attemptSync() {
    // Don't sync if already syncing or offline
    if (this.syncInProgress || !this.isOnline) {
      return {
        success: false,
        message: this.syncInProgress 
          ? 'Sync already in progress' 
          : i18n.t('offline.offlineMode')
      };
    }
    
    this.syncInProgress = true;
    this.notifySyncListeners();
    
    try {
      // Get all pending actions, sorted by priority (highest first) and timestamp
      let pendingActions = await this.getQueuedActions('pending');
      pendingActions = pendingActions.sort((a, b) => {
        // Sort by priority first (descending)
        if (b.priority !== a.priority) {
          return b.priority - a.priority;
        }
        // Then by timestamp (oldest first)
        return new Date(a.timestamp) - new Date(b.timestamp);
      });
      
      const results = {
        total: pendingActions.length,
        completed: 0,
        failed: 0
      };
      
      // Process actions sequentially to avoid overwhelming the network
      for (const action of pendingActions) {
        if (!this.isOnline) {
          // Stop syncing if we go offline
          break;
        }
        
        const success = await this.processAction(action);
        if (success) {
          results.completed++;
        } else {
          results.failed++;
        }
      }
      
      // Update pending count from database
      this.pendingActions = await this.countPendingActions();
      
      return {
        success: true,
        message: results.completed > 0 
          ? i18n.t('offline.syncComplete') 
          : 'No actions to sync',
        results
      };
    } catch (error) {
      return {
        success: false,
        message: `Sync error: ${error.message}`
      };
    } finally {
      this.syncInProgress = false;
      this.notifySyncListeners();
    }
  }

  /**
   * Clear all completed and failed actions from the queue
   * @returns {Promise<number>} - Number of actions cleared
   */
  async clearCompletedActions() {
    return new Promise((resolve, reject) => {
      if (!this.db) {
        reject(new Error('Database not initialized'));
        return;
      }
      
      const transaction = this.db.transaction([SYNC_QUEUE_STORE], 'readwrite');
      const store = transaction.objectStore(SYNC_QUEUE_STORE);
      const statusIndex = store.index('status');
      
      // Get completed actions
      const completedRequest = statusIndex.getAll('completed');
      
      completedRequest.onsuccess = () => {
        const completedActions = completedRequest.result;
        let deletedCount = 0;
        
        // No completed actions to delete
        if (completedActions.length === 0) {
          resolve(0);
          return;
        }
        
        // Delete each completed action
        completedActions.forEach(action => {
          const deleteRequest = store.delete(action.id);
          
          deleteRequest.onsuccess = () => {
            deletedCount++;
            
            // Resolve when all actions are deleted
            if (deletedCount === completedActions.length) {
              resolve(deletedCount);
            }
          };
          
          deleteRequest.onerror = (event) => {
            reject(new Error(`Error clearing completed actions: ${event.target.error}`));
          };
        });
      };
      
      completedRequest.onerror = (event) => {
        reject(new Error(`Error getting completed actions: ${event.target.error}`));
      };
    });
  }

  /**
   * Retry a failed action
   * @param {string} id - Action ID
   * @returns {Promise<Object>} - Updated action
   */
  async retryAction(id) {
    return new Promise((resolve, reject) => {
      if (!this.db) {
        reject(new Error('Database not initialized'));
        return;
      }
      
      const transaction = this.db.transaction([SYNC_QUEUE_STORE], 'readwrite');
      const store = transaction.objectStore(SYNC_QUEUE_STORE);
      const request = store.get(id);
      
      request.onsuccess = async () => {
        const action = request.result;
        if (!action) {
          reject(new Error(`Action with ID ${id} not found`));
          return;
        }
        
        // Reset status to pending and update retry metadata
        action.status = 'pending';
        action.lastUpdated = new Date().toISOString();
        action.retryCount = 0; // Reset retry count
        action.error = null; // Clear previous error
        
        // Put updated action back in store
        const updateRequest = store.put(action);
        
        updateRequest.onsuccess = () => {
          // Increment pending count if it was previously failed
          if (action.status === 'failed') {
            this.pendingActions++;
            this.notifySyncListeners();
          }
          
          // Try to sync immediately if online
          if (this.isOnline) {
            this.attemptSync();
          }
          
          resolve(action);
        };
        
        updateRequest.onerror = (event) => {
          reject(new Error(`Error updating action for retry: ${event.target.error}`));
        };
      };
      
      request.onerror = (event) => {
        reject(new Error(`Error getting action for retry: ${event.target.error}`));
      };
    });
  }
}

// Create and export singleton instance
const syncQueueService = new SyncQueueService();
export default syncQueueService;
          online: true,
          data: response.data
        };
      } catch (error) {
        // If server error (not network error), don't queue
        if (error.response) {
          return {
            success: false,
            online: true,
            error: error.response.data || error.message
          };
        }
        
        // For network errors, fall through to offline queue
        console.log('Network error, falling back to offline queue');
      }
    }
    
    // If offline or direct API call failed, add to queue
    try {
      const action = await this.addToQueue(
        endpoint,
        method,
        data,
        priority,
        description
      );
      
      return {
        success: true,
