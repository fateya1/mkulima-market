// File structure for MkulimaMarket Frontend

// src/index.js - Application entry point
import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter } from 'react-router-dom';
import { Provider } from 'react-redux';
import * as serviceWorkerRegistration from './serviceWorkerRegistration';
import App from './App';
import store from './store';
import './i18n'; // Internationalization setup
import './styles/global.css';

ReactDOM.render(
  <React.StrictMode>
    <Provider store={store}>
      <BrowserRouter>
        <App />
      </BrowserRouter>
    </Provider>
  </React.StrictMode>,
  document.getElementById('root')
);

// Register service worker for PWA functionality
serviceWorkerRegistration.register();

// src/App.js - Main application component
import React, { useEffect, useState } from 'react';
import { Routes, Route, Navigate } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import NetworkStatus from './components/common/NetworkStatus';
import { checkAuthStatus } from './store/slices/authSlice';
import SplashScreen from './screens/SplashScreen';
import AuthStack from './navigation/AuthStack';
import MainNavigator from './navigation/MainNavigator';
import OfflineNotice from './components/common/OfflineNotice';

const App = () => {
  const dispatch = useDispatch();
  const { isAuthenticated, isLoading } = useSelector(state => state.auth);
  const [isAppReady, setIsAppReady] = useState(false);

  useEffect(() => {
    const prepareApp = async () => {
      // Check authentication status, load initial data, etc.
      await dispatch(checkAuthStatus());
      setIsAppReady(true);
    };
    
    prepareApp();
  }, [dispatch]);

  if (!isAppReady || isLoading) {
    return <SplashScreen />;
  }

  return (
    <>
      <NetworkStatus />
      <OfflineNotice />
      <Routes>
        {!isAuthenticated ? (
          <Route path="/*" element={<AuthStack />} />
        ) : (
          <Route path="/*" element={<MainNavigator />} />
        )}
        <Route path="*" element={<Navigate to="/" replace />} />
      </Routes>
    </>
  );
};

export default App;

// src/navigation/AuthStack.js - Authentication routes
import React from 'react';
import { Routes, Route, Navigate } from 'react-router-dom';
import LoginScreen from '../screens/auth/LoginScreen';
import RegisterScreen from '../screens/auth/RegisterScreen';
import UserTypeScreen from '../screens/auth/UserTypeScreen';
import OnboardingScreen from '../screens/auth/OnboardingScreen';
import PhoneVerificationScreen from '../screens/auth/PhoneVerificationScreen';

const AuthStack = () => {
  return (
    <Routes>
      <Route path="/" element={<OnboardingScreen />} />
      <Route path="/login" element={<LoginScreen />} />
      <Route path="/register" element={<RegisterScreen />} />
      <Route path="/user-type" element={<UserTypeScreen />} />
      <Route path="/verify-phone" element={<PhoneVerificationScreen />} />
      <Route path="*" element={<Navigate to="/" replace />} />
    </Routes>
  );
};

export default AuthStack;

// src/navigation/MainNavigator.js - Main application routes
import React from 'react';
import { Routes, Route, Navigate } from 'react-router-dom';
import { useSelector } from 'react-redux';
import BottomNavigation from '../components/navigation/BottomNavigation';
import HomeScreen from '../screens/HomeScreen';
import MarketplaceScreen from '../screens/marketplace/MarketplaceScreen';
import ProfileScreen from '../screens/profile/ProfileScreen';
import TransactionsScreen from '../screens/transactions/TransactionsScreen';
import CreateListingScreen from '../screens/marketplace/CreateListingScreen';
import ListingDetailScreen from '../screens/marketplace/ListingDetailScreen';
import TransactionDetailScreen from '../screens/transactions/TransactionDetailScreen';
import TransportScreen from '../screens/transport/TransportScreen';
import NotificationsScreen from '../screens/NotificationsScreen';
import SettingsScreen from '../screens/profile/SettingsScreen';

const MainNavigator = () => {
  const { userType } = useSelector(state => state.auth);

  return (
    <>
      <Routes>
        <Route path="/" element={<HomeScreen />} />
        <Route path="/marketplace" element={<MarketplaceScreen />} />
        <Route path="/marketplace/listing/:id" element={<ListingDetailScreen />} />
        <Route path="/marketplace/create" element={<CreateListingScreen />} />
        <Route path="/transactions" element={<TransactionsScreen />} />
        <Route path="/transactions/:id" element={<TransactionDetailScreen />} />
        <Route path="/transport" element={<TransportScreen />} />
        <Route path="/profile" element={<ProfileScreen />} />
        <Route path="/notifications" element={<NotificationsScreen />} />
        <Route path="/settings" element={<SettingsScreen />} />
        <Route path="*" element={<Navigate to="/" replace />} />
      </Routes>
      <BottomNavigation userType={userType} />
    </>
  );
};

export default MainNavigator;

// src/store/index.js - Redux store configuration
import { configureStore } from '@reduxjs/toolkit';
import { setupListeners } from '@reduxjs/toolkit/query';
import { 
  persistStore,
  persistReducer,
  FLUSH,
  REHYDRATE,
  PAUSE,
  PERSIST,
  PURGE,
  REGISTER,
} from 'redux-persist';
import storage from 'redux-persist/lib/storage';
import rootReducer from './rootReducer';
import { api } from './api';

const persistConfig = {
  key: 'root',
  storage,
  whitelist: ['auth', 'offlineData']
};

const persistedReducer = persistReducer(persistConfig, rootReducer);

const store = configureStore({
  reducer: persistedReducer,
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware({
      serializableCheck: {
        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],
      },
    }).concat(api.middleware),
  devTools: process.env.NODE_ENV !== 'production',
});

export const persistor = persistStore(store);

setupListeners(store.dispatch);

export default store;

// src/store/rootReducer.js - Combined reducers
import { combineReducers } from '@reduxjs/toolkit';
import authReducer from './slices/authSlice';
import listingsReducer from './slices/listingsSlice';
import transactionsReducer from './slices/transactionsSlice';
import offlineDataReducer from './slices/offlineDataSlice';
import uiReducer from './slices/uiSlice';
import { api } from './api';

const rootReducer = combineReducers({
  auth: authReducer,
  listings: listingsReducer,
  transactions: transactionsReducer,
  offlineData: offlineDataReducer,
  ui: uiReducer,
  [api.reducerPath]: api.reducer,
});

export default rootReducer;

// src/store/api.js - RTK Query API setup
import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';

export const api = createApi({
  reducerPath: 'api',
  baseQuery: fetchBaseQuery({ 
    baseUrl: 'https://api.mkulimamarket.co.ke/v1',
    prepareHeaders: (headers, { getState }) => {
      // Get token from auth state
      const token = getState().auth.token;
      
      // If token exists, add authorization header
      if (token) {
        headers.set('Authorization', `Bearer ${token}`);
      }
      
      return headers;
    },
  }),
  tagTypes: ['Listings', 'Transactions', 'User', 'Transport'],
  endpoints: () => ({}),
});

// src/store/slices/authSlice.js - Authentication state management
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import authService from '../../services/authService';

export const login = createAsyncThunk(
  'auth/login',
  async ({ phone, password }, { rejectWithValue }) => {
    try {
      const data = await authService.login(phone, password);
      return data;
    } catch (error) {
      return rejectWithValue(error.response?.data?.message || 'Login failed');
    }
  }
);

export const register = createAsyncThunk(
  'auth/register',
  async (userData, { rejectWithValue }) => {
    try {
      const data = await authService.register(userData);
      return data;
    } catch (error) {
      return rejectWithValue(error.response?.data?.message || 'Registration failed');
    }
  }
);

export const verifyPhone = createAsyncThunk(
  'auth/verifyPhone',
  async ({ phone, code }, { rejectWithValue }) => {
    try {
      const data = await authService.verifyPhone(phone, code);
      return data;
    } catch (error) {
      return rejectWithValue(error.response?.data?.message || 'Verification failed');
    }
  }
);

export const checkAuthStatus = createAsyncThunk(
  'auth/checkStatus',
  async (_, { rejectWithValue }) => {
    try {
      const data = await authService.checkAuthStatus();
      return data;
    } catch (error) {
      return rejectWithValue('Session expired');
    }
  }
);

export const logout = createAsyncThunk(
  'auth/logout',
  async (_, { rejectWithValue }) => {
    try {
      await authService.logout();
      return;
    } catch (error) {
      return rejectWithValue('Logout failed');
    }
  }
);

const initialState = {
  user: null,
  token: null,
  userType: null, // 'farmer', 'buyer', 'transporter'
  isAuthenticated: false,
  isLoading: false,
  error: null,
  verificationStatus: null,
};

const authSlice = createSlice({
  name: 'auth',
  initialState,
  reducers: {
    clearError: (state) => {
      state.error = null;
    },
    setUserType: (state, action) => {
      state.userType = action.payload;
    },
  },
  extraReducers: (builder) => {
    builder
      // Login
      .addCase(login.pending, (state) => {
        state.isLoading = true;
        state.error = null;
      })
      .addCase(login.fulfilled, (state, action) => {
        state.isLoading = false;
        state.isAuthenticated = true;
        state.user = action.payload.user;
        state.token = action.payload.token;
        state.userType = action.payload.user.userType;
      })
      .addCase(login.rejected, (state, action) => {
        state.isLoading = false;
        state.error = action.payload;
      })
      // Register
      .addCase(register.pending, (state) => {
        state.isLoading = true;
        state.error = null;
      })
      .addCase(register.fulfilled, (state, action) => {
        state.isLoading = false;
        state.verificationStatus = 'verification_needed';
      })
      .addCase(register.rejected, (state, action) => {
        state.isLoading = false;
        state.error = action.payload;
      })
      // Verify Phone
      .addCase(verifyPhone.pending, (state) => {
        state.isLoading = true;
        state.error = null;
      })
      .addCase(verifyPhone.fulfilled, (state, action) => {
        state.isLoading = false;
        state.isAuthenticated = true;
        state.user = action.payload.user;
        state.token = action.payload.token;
        state.userType = action.payload.user.userType;
        state.verificationStatus = 'verified';
      })
      .addCase(verifyPhone.rejected, (state, action) => {
        state.isLoading = false;
        state.error = action.payload;
      })
      // Check Auth Status
      .addCase(checkAuthStatus.pending, (state) => {
        state.isLoading = true;
      })
      .addCase(checkAuthStatus.fulfilled, (state, action) => {
        state.isLoading = false;
        state.isAuthenticated = true;
        state.user = action.payload.user;
        state.token = action.payload.token;
        state.userType = action.payload.user.userType;
      })
      .addCase(checkAuthStatus.rejected, (state) => {
        state.isLoading = false;
        state.isAuthenticated = false;
        state.user = null;
        state.token = null;
        state.userType = null;
      })
      // Logout
      .addCase(logout.fulfilled, (state) => {
        state.isAuthenticated = false;
        state.user = null;
        state.token = null;
        state.userType = null;
      });
  }
});

export const { clearError, setUserType } = authSlice.actions;

export default authSlice.reducer;

// src/services/offlineSync.js - Offline data synchronization
import { openDB } from 'idb';
import { store } from '../store';
import { syncListings, syncTransactions } from '../store/slices/offlineDataSlice';
import { api } from '../store/api';

// Initialize IndexedDB
const initDB = async () => {
  return openDB('mkulimaMarketDB', 1, {
    upgrade(db) {
      // Create object stores
      if (!db.objectStoreNames.contains('listings')) {
        db.createObjectStore('listings', { keyPath: 'id' });
      }
      if (!db.objectStoreNames.contains('transactions')) {
        db.createObjectStore('transactions', { keyPath: 'id' });
      }
      if (!db.objectStoreNames.contains('syncQueue')) {
        db.createObjectStore('syncQueue', { keyPath: 'id', autoIncrement: true });
      }
      if (!db.objectStoreNames.contains('userData')) {
        db.createObjectStore('userData', { keyPath: 'id' });
      }
    }
  });
};

// Save data for offline access
export const saveOfflineData = async (storeName, data) => {
  const db = await initDB();
  const tx = db.transaction(storeName, 'readwrite');
  const store = tx.objectStore(storeName);

  if (Array.isArray(data)) {
    for (const item of data) {
      await store.put(item);
    }
  } else {
    await store.put(data);
  }

  await tx.done;
};

// Get offline data
export const getOfflineData = async (storeName, key = null) => {
  const db = await initDB();
  const tx = db.transaction(storeName, 'readonly');
  const store = tx.objectStore(storeName);

  if (key) {
    return store.get(key);
  } else {
    return store.getAll();
  }
};

// Add operation to sync queue
export const addToSyncQueue = async (operation) => {
  const db = await initDB();
  const tx = db.transaction('syncQueue', 'readwrite');
  const store = tx.objectStore('syncQueue');
  await store.add({
    ...operation,
    timestamp: new Date().toISOString(),
    synced: false
  });
  await tx.done;
};

// Synchronize offline data when online
export const synchronizeData = async () => {
  if (!navigator.onLine) return;

  const db = await initDB();
  const queue = await db.getAll('syncQueue');
  const pendingOperations = queue.filter(op => !op.synced);

  for (const operation of pendingOperations) {
    try {
      const { type, endpoint, data, method, id } = operation;
      
      // Handle different operation types
      if (type === 'listing') {
        if (method === 'POST') {
          await store.dispatch(api.endpoints.createListing.initiate(data));
        } else if (method === 'PUT') {
          await store.dispatch(api.endpoints.updateListing.initiate({ id, ...data }));
        }
      } else if (type === 'transaction') {
        if (method === 'POST') {
          await store.dispatch(api.endpoints.createTransaction.initiate(data));
        } else if (method === 'PUT') {
          await store.dispatch(api.endpoints.updateTransaction.initiate({ id, ...data }));
        }
      }

      // Mark as synced
      const tx = db.transaction('syncQueue', 'readwrite');
      const store = tx.objectStore('syncQueue');
      const item = await store.get(operation.id);
      await store.put({ ...item, synced: true });
      await tx.done;
    } catch (error) {
      console.error('Sync error:', error);
      // Will retry on next sync
    }
  }

  // Fetch latest data after sync
  await store.dispatch(syncListings());
  await store.dispatch(syncTransactions());
};

// Listen for online status and sync when connection is restored
export const initOfflineSync = () => {
  window.addEventListener('online', synchronizeData);
};

// src/components/common/NetworkStatus.js - Network status monitoring
import React, { useEffect, useState } from 'react';
import { useDispatch } from 'react-redux';
import { setNetworkStatus } from '../../store/slices/uiSlice';
import { synchronizeData } from '../../services/offlineSync';

const NetworkStatus = () => {
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  const dispatch = useDispatch();

  useEffect(() => {
    const handleOnline = () => {
      setIsOnline(true);
      dispatch(setNetworkStatus(true));
      synchronizeData(); // Sync data when back online
    };

    const handleOffline = () => {
      setIsOnline(false);
      dispatch(setNetworkStatus(false));
    };

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, [dispatch]);

  return null; // This component doesn't render anything, just monitors network status
};

export default NetworkStatus;

// src/screens/marketplace/CreateListingScreen.js - Create listing wizard
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import { useCreateListingMutation } from '../../store/api/listingsApi';
import { addToSyncQueue, saveOfflineData } from '../../services/offlineSync';
import StepProgressBar from '../../components/common/StepProgressBar';
import ProductDetails from '../../components/listings/steps/ProductDetails';
import QualityAndPrice from '../../components/listings/steps/QualityAndPrice';
import LocationAvailability from '../../components/listings/steps/LocationAvailability';
import PhotosAndReview from '../../components/listings/steps/PhotosAndReview';
import SuccessScreen from '../../components/common/SuccessScreen';
import { showToast } from '../../store/slices/uiSlice';

const CreateListingScreen = () => {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const isOnline = useSelector(state => state.ui.isOnline);
  const [createListing, { isLoading }] = useCreateListingMutation();
  
  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState({
    productId: '',
    title: '',
    description: '',
    quantity: {
      value: '',
      unit: 'kg',
      remaining: ''
    },
    price: {
      amount: '',
      currency: 'KES',
      isNegotiable: true,
      minAcceptable: ''
    },
    quality: {
      description: '',
      attributes: {},
      images: []
    },
    location: {
      locationId: '',
      displayPrecision: 'ward'
    },
    availability: {
      startDate: new Date(),
      endDate: new Date(new Date().setDate(new Date().getDate() + 30)),
      isRecurring: false
    },
    status: 'active',
    visibility: {
      isPublic: true
    }
  });
  
  const [isSuccess, setIsSuccess] = useState(false);
  
  const handleStepChange = (step) => {
    setCurrentStep(step);
    window.scrollTo(0, 0);
  };
  
  const updateFormData = (data) => {
    setFormData(prevData => ({
      ...prevData,
      ...data
    }));
  };
  
  const handleSubmit = async () => {
    try {
      // If online, submit directly to API
      if (isOnline) {
        const result = await createListing(formData).unwrap();
        
        // Save to offline storage for access when offline
        await saveOfflineData('listings', result);
        
        setIsSuccess(true);
      } else {
        // If offline, store in sync queue for later
        const tempId = `temp_${Date.now()}`;
        const offlineData = {
          ...formData,
          id: tempId,
          createdAt: new Date().toISOString(),
          status: 'pending_sync'
        };
        
        // Save to offline storage
        await saveOfflineData('listings', offlineData);
        
        // Add to sync queue
        await addToSyncQueue({
          type: 'listing',
          method: 'POST',
          data: formData,
          endpoint: '/listings',
          timestamp: new Date().toISOString()
        });
        
        dispatch(showToast({
          message: 'Listing saved and will be uploaded when you're back online',
          type: 'info'
        }));
        
        setIsSuccess(true);
      }
    } catch (error) {
      dispatch(showToast({
        message: error.message || 'Failed to create listing. Please try again.',
        type: 'error'
      }));
    }
  };
  
  const renderStep = () => {
    switch (currentStep) {
      case 1:
        return (
          <ProductDetails
            formData={formData}
            updateFormData={updateFormData}
            onNext={() => handleStepChange(2)}
          />
        );
      case 2:
        return (
          <QualityAndPrice
            formData={formData}
            updateFormData={updateFormData}
            onNext={() => handleStepChange(3)}
            onBack={() => handleStepChange(1)}
          />
        );
      case 3:
        return (
          <LocationAvailability
            formData={formData}
            updateFormData={updateFormData}
            onNext={() => handleStepChange(4)}
            onBack={() => handleStepChange(2)}
          />
        );
      case 4:
        return (
          <PhotosAndReview
            formData={formData}
            updateFormData={updateFormData}
            onSubmit={handleSubmit}
            onBack={() => handleStepChange(3)}
            isLoading={isLoading}
          />
        );
      default:
        return null;
    }
  };
  
  if (isSuccess) {
    return (
      <SuccessScreen
        title="Listing Created!"
        message="Your product has been listed successfully."
        primaryAction={{
          label: "View Listing",
          onPress: () => navigate('/marketplace')
        }}
        secondaryAction={{
          label: "Create Another Listing",
          onPress: () => {
            setFormData({
              productId: '',
              title: '',
              description: '',
              quantity: {
                value: '',
                unit: 'kg',
                remaining: ''
              },
              price: {
                amount: '',
                currency: 'KES',
                isNegotiable: true,
                minAcceptable: ''
              },
              quality: {
                description: '',
                attributes: {},
                images: []
              },
              location: {
                locationId: '',
                displayPrecision: 'ward'
              },
              availability: {
                startDate: new Date(),
                endDate: new Date(new Date().setDate(new Date().getDate() + 30)),
                isRecurring: false
              },
              status: 'active',
              visibility: {
                isPublic: true
              }
            });
            setCurrentStep(1);
            setIsSuccess(false);
          }
        }}
      />
    );
  }
  
  return (
    <div className="create-listing">
      <header className="screen-header">
        <h1>Create Listing</h1>
        <StepProgressBar currentStep={currentStep} totalSteps={4} />
      </header>
      <div className="listing-form-container">
        {renderStep()}
      </div>
    </div>
  );
};

export default CreateListingScreen;

// src/screens/HomeScreen.js - Dashboard based on user type
import React, { useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { useFetchDashboardDataQuery } from '../store/api/dashboardApi';
import FarmerDashboard from '../components/dashboard/FarmerDashboard';
import BuyerDashboard from '../components/dashboard/BuyerDashboard';
import TransporterDashboard from '../components/dashboard/TransporterDashboard';
import LoadingSpinner from '../components/common/LoadingSpinner';
import ErrorMessage from '../components/common/ErrorMessage';
import { getOfflineData } from '../services/offlineSync';
import { setDashboardData } from '../store/slices/offlineDataSlice';

const HomeScreen = () => {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const { userType, user } = useSelector(state => state.auth);
  const isOnline = useSelector(state => state.ui.isOnline);
  const { dashboardData } = useSelector(state => state.offlineData);
  
  const { data, isLoading, isError, refetch } = useFetchDashboardDataQuery(
    { userType },
    { skip: !isOnline } // Skip query when offline
  );
  
  useEffect(() => {
    const loadOfflineData = async () => {
      if (!isOnline && !dashboardData) {
        try {
          const offlineData = await getOfflineData('userData', 'dashboard');
          if (offlineData) {
            dispatch(setDashboardData(offlineData));
          }
        } catch (error) {
          console.error('Error loading offline dashboard data:', error);
        }
      }
    };
    
    loadOfflineData();
  }, [isOnline, dashboardData, dispatch]);
  
  // Determine which dashboard to show based on user type
  const renderDashboard = () => {
    if (isLoading) {
      return <LoadingSpinner />;
    }
    
    if (isError) {
      return (
        <ErrorMessage 
          message="Couldn't load dashboard data" 
          onRetry={isOnline ? refetch : null} 
        />
      );
    }
    
    const displayData = isOnline ? data : dashboardData;
    
    if (!displayData) {
      return <ErrorMessage message="No data available" />;
    }
    
    switch (userType) {
      case 'farmer':
        return <FarmerDashboard data={displayData} user={user} isOnline={isOnline} />;
      case 'buyer':
        return <BuyerDashboard data={displayData} user={user} isOnline={isOnline} />;
      case 'transporter':
        return <TransporterDashboard data={displayData} user={user} isOnline={isOnline} />;
      default:
        return <ErrorMessage message="Unknown user type" />;
    }
  };
  
  return (
    <div className="home-screen">
      <header className="screen-header">
        <h1>Welcome, {user?.full_name || 'User'}</h1>
        <button 
          className="icon-button"
          onClick={() => navigate('/notifications')}
          aria-label="Notifications"
        >
          <i className="notification-icon" />
        </button>
      </header>
      <div className="dashboard-container">
        {renderDashboard()}
      </div>
    </div>
  );
};

export default HomeScreen;

// src/styles/global.css - Mobile-first design system
/* Global Design System - Mobile First Approach */

/* Variables - Color Palette based on MkulimaMarket brand identity */
:root {
  /* Primary Colors */
  --primary-green: #2E8B57;
  --primary-green-light: #4CAF50;
  --primary-green-lighter: #8BC34A;
  --primary-green-dark: #1B5E20;
  --primary-green-darker: #33691E;
  
  /* Secondary Colors */
  --primary-brown: #8B4513;
  --primary-brown-light: #A1887F;
  --primary-brown-lighter: #BCAAA4;
  --primary-brown-dark: #5D4037;
  --primary-brown-darker: #3E2723;
  
  /* Accent Colors */
  --accent-blue: #1976D2;
  --accent-blue-light: #42A5F5;
  --accent-blue-lighter: #90CAF9;
  --accent-blue-dark: #0D47A1;
  --accent-blue-darker: #0A2472;
  
  --accent-orange: #FF8C00;
  --accent-orange-light: #FFA726;
  --accent-orange-lighter: #FFCC80;
  --accent-orange-dark: #E65100;
  --accent-orange-darker: #BF360C;
  
  /* Neutral Colors */
  --neutral-dark: #424242;
  --neutral-medium: #757575;
  --neutral-light: #EEEEEE;
  --neutral-lighter: #F5F5F5;
  --white: #FFFFFF;
  
  /* Semantic Colors */
  --success: #4CAF50;
  --warning: #FFC107;
  --error: #F44336;
  --info: #2196F3;
  
  /* Typography */
  --font-family: 'Noto Sans', sans-serif;
  --font-size-micro: 10px;
  --font-size-small: 12px;
  --font-size-body: 14px;
  --font-size-large: 16px;
  --font-size-title: 18px;
  --font-size-header: 24px;
  
  /* Spacing */
  --spacing-xxs: 2px;
  --spacing-xs: 4px;
  --spacing-sm: 8px;
  --spacing-md: 16px;
  --spacing-lg: 24px;
  --spacing-xl: 32px;
  --spacing-xxl: 48px;
  
  /* Border Radius */
  --radius-sm: 4px;
  --radius-md: 8px;
  --radius-lg: 16px;
  --radius-round: 50%;
  
  /* Shadows */
  --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.1);
  --shadow-md: 0 2px 4px rgba(0, 0, 0, 0.1);
  --shadow-lg: 0 4px 8px rgba(0, 0, 0, 0.1);
  
  /* Z-index layers */
  --z-index-base: 1;
  --z-index-overlay: 10;
  --z-index-modal: 100;
  --z-index-toast: 1000;
}

/* Base Styles */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

html, body {
  height: 100%;
  font-family: var(--font-family);
  font-size: var(--font-size-body);
  color: var(--neutral-dark);
  background-color: var(--neutral-lighter);
  line-height: 1.5;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

#root {
  height: 100%;
  display: flex;
  flex-direction: column;
}

/* Typography */
h1, h2, h3, h4, h5, h6 {
  margin-bottom: var(--spacing-sm);
  font-weight: 500;
}

h1 {
  font-size: var(--font-size-header);
}

h2 {
  font-size: var(--font-size-title);
}

p {
  margin-bottom: var(--spacing-md);
}

/* Buttons */
.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: var(--spacing-sm) var(--spacing-md);
  border-radius: var(--radius-md);
  font-weight: 500;
  cursor: pointer;
  transition: background-color 0.2s, opacity 0.2s;
  border: none;
  text-align: center;
  min-height: 48px; /* For touch targets */
}

.btn-primary {
  background-color: var(--primary-green);
  color: var(--white);
}

.btn-secondary {
  background-color: var(--white);
  color: var(--primary-green);
  border: 1px solid var(--primary-green);
}

.btn-danger {
  background-color: var(--error);
  color: var(--white);
}

.btn-full {
  width: 100%;
}

.btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

/* Forms */
.form-group {
  margin-bottom: var(--spacing-md);
}

.form-label {
  display: block;
  margin-bottom: var(--spacing-xs);
  font-weight: 500;
}

.form-input, 
.form-select, 
.form-textarea {
  width: 100%;
  padding: var(--spacing-sm);
  border: 1px solid var(--neutral-light);
  border-radius: var(--radius-md);
  font-size: var(--font-size-body);
  min-height: 48px; /* For touch targets */
}

.form-input:focus, 
.form-select:focus, 
.form-textarea:focus {
  outline: none;
  border-color: var(--primary-green);
  box-shadow: 0 0 0 1px var(--primary-green-light);
}

.form-error {
  color: var(--error);
  font-size: var(--font-size-small);
  margin-top: var(--spacing-xs);
}

/* Cards */
.card {
  background-color: var(--white);
  border-radius: var(--radius-md);
  box-shadow: var(--shadow-md);
  padding: var(--spacing-md);
  margin-bottom: var(--spacing-md);
}

.card-title {
  font-size: var(--font-size-large);
  margin-bottom: var(--spacing-sm);
}

.card-content {
  margin-bottom: var(--spacing-sm);
}

/* Layout */
.container {
  padding: var(--spacing-md);
  max-width: 600px;
  margin: 0 auto;
  width: 100%;
}

.screen-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: var(--spacing-md);
  background-color: var(--white);
  box-shadow: var(--shadow-sm);
  position: sticky;
  top: 0;
  z-index: var(--z-index-overlay);
}

.bottom-navigation {
  display: flex;
  justify-content: space-around;
  align-items: center;
  background-color: var(--white);
  box-shadow: 0 -2px 4px rgba(0, 0, 0, 0.1);
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  height: 56px;
  z-index: var(--z-index-overlay);
}

.nav-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  flex: 1;
  height: 100%;
  color: var(--neutral-medium);
  text-decoration: none;
  font-size: var(--font-size-small);
}

.nav-item.active {
  color: var(--primary-green);
}

.icon {
  margin-bottom: var(--spacing-xxs);
  font-size: 20px;
}

/* Page specific styles */
.auth-container {
  display: flex;
  flex-direction: column;
  min-height: 100%;
  padding: var(--spacing-lg);
  justify-content: center;
}

.auth-logo {
  text-align: center;
  margin-bottom: var(--spacing-xl);
}

.auth-form {
  margin-bottom: var(--spacing-xl);
}

.auth-footer {
  text-align: center;
  margin-top: auto;
  padding-bottom: var(--spacing-xl);
}

/* Utility classes */
.text-center {
  text-align: center;
}

.text-right {
  text-align: right;
}

.text-error {
  color: var(--error);
}

.text-success {
  color: var(--success);
}

.mb-sm {
  margin-bottom: var(--spacing-sm);
}

.mb-md {
  margin-bottom: var(--spacing-md);
}

.mb-lg {
  margin-bottom: var(--spacing-lg);
}

.flex {
  display: flex;
}

.flex-column {
  flex-direction: column;
}

.justify-between {
  justify-content: space-between;
}

.items-center {
  align-items: center;
}

.offline-notice {
  background-color: var(--warning);
  color: var(--neutral-dark);
  text-align: center;
  padding: var(--spacing-sm);
  position: sticky;
  top: 0;
  z-index: var(--z-index-toast);
}

/* Responsive adjustments */
@media (min-width: 600px) {
  :root {
    --font-size-body: 16px;
    --font-size-large: 18px;
    --font-size-title: 20px;
    --font-size-header: 28px;
  }
  
  .container {
    padding: var(--spacing-lg);
  }
}
