/**
 * MkulimaMarket - API Service
 * 
 * This module handles all API communication for the MkulimaMarket platform,
 * implementing robust error handling, authentication, and network resilience
 * for rural areas with limited connectivity.
 */

import axios from 'axios';
import { store } from '../store';
import { setLoading, setLoadingMessage, showAlert } from '../slices/uiSlice';
import { logout } from '../slices/authSlice'; // Only import 'logout' which we know exists
import { addToSyncQueue } from '../slices/offlineDataSlice';
import { networkService } from './networkService';

// Base URL for API requests
const BASE_URL = process.env.REACT_APP_API_URL || 'https://api.mkulimamarket.co.ke/v1';

// Create axios instance with default config
const api = axios.create({
  baseURL: BASE_URL,
  timeout: 30000, // 30 second timeout for slow connections
  headers: {
    'Content-Type': 'application/json',
    'Accept-Language': 'sw' // Default to Swahili based on user research
  }
});

// Request interceptor
api.interceptors.request.use(
  async (config) => {
    // Check if we're online
    if (!networkService.isOnline()) {
      // Queue the request for later if it's not a read-only operation
      if (config.method !== 'get') {
        await store.dispatch(
          addToSyncQueue({
            url: config.url,
            method: config.method,
            data: config.data,
            params: config.params,
            headers: config.headers,
            timestamp: Date.now()
          })
        );
        
        // Throw a specific error to be caught by the caller
        throw new Error('OFFLINE_MODE');
      }
    }
    
    // Get current state
    const state = store.getState();
    
    // Update language preference from current state
    config.headers['Accept-Language'] = state.ui.language || 'sw';
    
    // Add auth token if available
    if (state.auth.token) {
      config.headers['Authorization'] = `Bearer ${state.auth.token}`;
    }
    
    // Show loading indicator for requests that take time
    if (config.showLoading) {
      store.dispatch(setLoading(true));
      if (config.loadingMessage) {
        store.dispatch(setLoadingMessage(config.loadingMessage));
      }
    }
    
    return config;
  },
  (error) => {
    // Hide loading indicator
    store.dispatch(setLoading(false));
    store.dispatch(setLoadingMessage(''));
    
    return Promise.reject(error);
  }
);

// Response interceptor
api.interceptors.response.use(
  (response) => {
    // Hide loading indicator
    store.dispatch(setLoading(false));
    store.dispatch(setLoadingMessage(''));
    
    return response;
  },
  async (error) => {
    // Hide loading indicator
    store.dispatch(setLoading(false));
    store.dispatch(setLoadingMessage(''));
    
    // Handle offline error specially
    if (error.message === 'OFFLINE_MODE') {
      // This is a special case that should be handled by the caller
      return Promise.reject(error);
    }
    
    // Handle network errors
    if (!error.response) {
      // Network error
      store.dispatch(
        showAlert({
          type: 'error',
          title: 'Network Error',
          message: 'Cannot connect to the server. Please check your internet connection.'
        })
      );
      return Promise.reject(error);
    }
    
    // Handle 401 Unauthorized (token expired)
    if (error.response.status === 401) {
      // Get current state
      const state = store.getState();
      
      // Try to refresh token if we have a refresh token
      if (state.auth.refreshToken) {
        try {
          // Call the backend to refresh the token
          const response = await axios.post(`${BASE_URL}/auth/refresh-token`, { 
            refresh_token: state.auth.refreshToken 
          });
          
          // Get the new tokens
          const newToken = response.data.token;
          const newRefreshToken = response.data.refresh_token;
          
          // Update the token in the Redux store via the authSlice reducer
          // We do this by dispatching an action that our auth slice should handle
          // Instead of importing specific action creators, we'll dispatch a generic action
          store.dispatch({ 
            type: 'auth/tokenRefreshed', 
            payload: { 
              token: newToken, 
              refreshToken: newRefreshToken 
            } 
          });
          
          // Retry the original request with the new token
          error.config.headers['Authorization'] = `Bearer ${newToken}`;
          return api(error.config);
        } catch (refreshError) {
          // If refresh token fails, logout the user
          store.dispatch(logout());
          store.dispatch(
            showAlert({
              type: 'error',
              title: 'Session Expired',
              message: 'Your session has expired. Please login again.'
            })
          );
          return Promise.reject(refreshError);
        }
      } else {
        // No refresh token, just logout
        store.dispatch(logout());
        store.dispatch(
          showAlert({
            type: 'error',
            title: 'Authentication Error',
            message: 'You need to login to continue.'
          })
        );
      }
      
      return Promise.reject(error);
    }
    
    // Handle 403 Forbidden
    if (error.response.status === 403) {
      store.dispatch(
        showAlert({
          type: 'error',
          title: 'Access Denied',
          message: 'You do not have permission to perform this action.'
        })
      );
    }
    
    // Handle 404 Not Found
    if (error.response.status === 404) {
      store.dispatch(
        showAlert({
          type: 'error',
          title: 'Not Found',
          message: 'The requested resource was not found.'
        })
      );
    }
    
    // Handle 422 Validation Error
    if (error.response.status === 422) {
      const validationErrors = error.response.data.errors || {};
      const errorMessages = Object.values(validationErrors).flat();
      
      store.dispatch(
        showAlert({
          type: 'error',
          title: 'Validation Error',
          message: errorMessages.join('\n') || 'Please check your input and try again.'
        })
      );
    }
    
    // Handle 500 Server Error
    if (error.response.status >= 500) {
      store.dispatch(
        showAlert({
          type: 'error',
          title: 'Server Error',
          message: 'Something went wrong on our end. Please try again later.'
        })
      );
    }
    
    return Promise.reject(error);
  }
);

// API service methods
const apiService = {
  /**
   * User Authentication
   */
  
  // Register new user
  register: async (userData) => {
    try {
      const response = await api.post('/auth/register', userData, {
        showLoading: true,
        loadingMessage: 'Creating your account...'
      });
      return response.data;
    } catch (error) {
      if (error.message === 'OFFLINE_MODE') {
        throw new Error('Cannot register while offline. Please try again when you have internet connection.');
      }
      throw error;
    }
  },
  
  // Login user
  login: async (credentials) => {
    try {
      const response = await api.post('/auth/login', credentials, {
        showLoading: true,
        loadingMessage: 'Logging in...'
      });
      return response.data;
    } catch (error) {
      if (error.message === 'OFFLINE_MODE') {
        throw new Error('Cannot login while offline. Please try again when you have internet connection.');
      }
      throw error;
    }
  },
  
  // Verify user phone number with OTP
  verifyPhone: async (data) => {
    try {
      const response = await api.post('/auth/verify', data, {
        showLoading: true,
        loadingMessage: 'Verifying...'
      });
      return response.data;
    } catch (error) {
      if (error.message === 'OFFLINE_MODE') {
        throw new Error('Cannot verify phone while offline. Please try again when you have internet connection.');
      }
      throw error;
    }
  },
  
  // Request password reset
  requestPasswordReset: async (phoneNumber) => {
    try {
      const response = await api.post('/auth/reset-password', { phone_number: phoneNumber }, {
        showLoading: true,
        loadingMessage: 'Sending reset code...'
      });
      return response.data;
    } catch (error) {
      if (error.message === 'OFFLINE_MODE') {
        throw new Error('Cannot request password reset while offline. Please try again when you have internet connection.');
      }
      throw error;
    }
  },
  
  /**
   * User Profile
   */
  
  // Get current user profile
  getUserProfile: async () => {
    try {
      const response = await api.get('/users/profile');
      return response.data;
    } catch (error) {
      if (error.message === 'OFFLINE_MODE') {
        // Return cached profile if available
        const state = store.getState();
        if (state.offlineData.cachedData.userProfile) {
          return state.offlineData.cachedData.userProfile;
        }
        throw new Error('Your profile is not available offline.');
      }
      throw error;
    }
  },
  
  // Update user profile
  updateUserProfile: async (profileData) => {
    try {
      const response = await api.put('/users/profile', profileData, {
        showLoading: true,
        loadingMessage: 'Updating profile...'
      });
      return response.data;
    } catch (error) {
      if (error.message === 'OFFLINE_MODE') {
        // Queue the update for later
        throw new Error('Profile will be updated when you are back online.');
      }
      throw error;
    }
  },
  
  // Upload profile image
  uploadProfileImage: async (imageFile) => {
    try {
      const formData = new FormData();
      formData.append('image', imageFile);
      
      const response = await api.post('/users/profile/image', formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        },
        showLoading: true,
        loadingMessage: 'Uploading image...'
      });
      
      return response.data;
    } catch (error) {
      if (error.message === 'OFFLINE_MODE') {
        throw new Error('Cannot upload image while offline. Your image will be uploaded when you are back online.');
      }
      throw error;
    }
  },
  
  // Submit verification documents
  submitVerification: async (documentData) => {
    try {
      const formData = new FormData();
      
      // Append document files
      if (documentData.idDocument) {
        formData.append('id_document', documentData.idDocument);
      }
      
      if (documentData.businessLicense) {
        formData.append('business_license', documentData.businessLicense);
      }
      
      // Append other verification data
      Object.keys(documentData).forEach(key => {
        if (!['idDocument', 'businessLicense'].includes(key)) {
          formData.append(key, documentData[key]);
        }
      });
      
      const response = await api.post('/users/verify', formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        },
        showLoading: true,
        loadingMessage: 'Submitting verification...'
      });
      
      return response.data;
    } catch (error) {
      if (error.message === 'OFFLINE_MODE') {
        throw new Error('Cannot submit verification documents while offline. Please try again when you have internet connection.');
      }
      throw error;
    }
  },
  
  /**
   * Marketplace
   */
  
  // Create new listing
  createListing: async (listingData) => {
    try {
      const formData = new FormData();
      
      // Append images if available
      if (listingData.images && listingData.images.length) {
        listingData.images.forEach((image, index) => {
          formData.append(`images[${index}]`, image);
        });
      }
      
      // Append other listing data
      Object.keys(listingData).forEach(key => {
        if (key !== 'images') {
          if (typeof listingData[key] === 'object') {
            formData.append(key, JSON.stringify(listingData[key]));
          } else {
            formData.append(key, listingData[key]);
          }
        }
      });
      
      const response = await api.post('/listings', formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        },
        showLoading: true,
        loadingMessage: 'Creating listing...'
      });
      
      return response.data;
    } catch (error) {
      if (error.message === 'OFFLINE_MODE') {
        throw new Error('Your listing will be created when you are back online.');
      }
      throw error;
    }
  },
  
  // Get listings with filters
  getListings: async (filters = {}) => {
    try {
      const response = await api.get('/listings', { params: filters });
      return response.data;
    } catch (error) {
      if (error.message === 'OFFLINE_MODE') {
        // Return cached listings if available
        const state = store.getState();
        if (state.offlineData.cachedData.listings) {
          // Apply basic filtering on cached data
          let filteredListings = state.offlineData.cachedData.listings;
          
          if (filters.category) {
            filteredListings = filteredListings.filter(listing => 
              listing.category === filters.category
            );
          }
          
          if (filters.search) {
            const searchLower = filters.search.toLowerCase();
            filteredListings = filteredListings.filter(listing => 
              listing.title.toLowerCase().includes(searchLower) || 
              listing.description.toLowerCase().includes(searchLower)
            );
          }
          
          return {
            data: filteredListings,
            meta: {
              total: filteredListings.length,
              per_page: filteredListings.length,
              current_page: 1,
              last_page: 1,
              from: 1,
              to: filteredListings.length
            }
          };
        }
        throw new Error('Listings are not available offline.');
      }
      throw error;
    }
  },
  
  // Get single listing details
  getListing: async (id) => {
    try {
      const response = await api.get(`/listings/${id}`);
      return response.data;
    } catch (error) {
      if (error.message === 'OFFLINE_MODE') {
        // Return cached listing if available
        const state = store.getState();
        const cachedListing = state.offlineData.cachedData.listings.find(
          listing => listing.id === id
        );
        
        if (cachedListing) {
          return { data: cachedListing };
        }
        throw new Error('This listing is not available offline.');
      }
      throw error;
    }
  },
  
  // Update listing
  updateListing: async (id, listingData) => {
    try {
      const formData = new FormData();
      
      // Append images if available
      if (listingData.images && listingData.images.length) {
        listingData.images.forEach((image, index) => {
          if (typeof image === 'string') {
            // Existing image URL
            formData.append(`existing_images[${index}]`, image);
          } else {
            // New image file
            formData.append(`new_images[${index}]`, image);
          }
        });
      }
      
      // Append other listing data
      Object.keys(listingData).forEach(key => {
        if (key !== 'images') {
          if (typeof listingData[key] === 'object') {
            formData.append(key, JSON.stringify(listingData[key]));
          } else {
            formData.append(key, listingData[key]);
          }
        }
      });
      
      // Use PUT for update with FormData
      formData.append('_method', 'PUT');
      
      const response = await api.post(`/listings/${id}`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        },
        showLoading: true,
        loadingMessage: 'Updating listing...'
      });
      
      return response.data;
    } catch (error) {
      if (error.message === 'OFFLINE_MODE') {
        throw new Error('Your listing will be updated when you are back online.');
      }
      throw error;
    }
  },
  
  // Delete listing
  deleteListing: async (id) => {
    try {
      const response = await api.delete(`/listings/${id}`, {
        showLoading: true,
        loadingMessage: 'Deleting listing...'
      });
      return response.data;
    } catch (error) {
      if (error.message === 'OFFLINE_MODE') {
        throw new Error('Your listing will be deleted when you are back online.');
      }
      throw error;
    }
  },
  
  /**
   * Transactions
   */
  
  // Create transaction from listing
  createTransaction: async (transactionData) => {
    try {
      const response = await api.post('/transactions', transactionData, {
        showLoading: true,
        loadingMessage: 'Creating transaction...'
      });
      return response.data;
    } catch (error) {
      if (error.message === 'OFFLINE_MODE') {
        throw new Error('Your transaction will be created when you are back online.');
      }
      throw error;
    }
  },
  
  // Get user transactions
  getTransactions: async (filters = {}) => {
    try {
      const response = await api.get('/transactions', { params: filters });
      return response.data;
    } catch (error) {
      if (error.message === 'OFFLINE_MODE') {
        // Return cached transactions if available
        const state = store.getState();
        if (state.offlineData.cachedData.transactions) {
          return {
            data: state.offlineData.cachedData.transactions,
            meta: {
              total: state.offlineData.cachedData.transactions.length,
              per_page: state.offlineData.cachedData.transactions.length,
              current_page: 1,
              last_page: 1,
              from: 1,
              to: state.offlineData.cachedData.transactions.length
            }
          };
        }
        throw new Error('Transactions are not available offline.');
      }
      throw error;
    }
  },
  
  // Get transaction details
  getTransaction: async (id) => {
    try {
      const response = await api.get(`/transactions/${id}`);
      return response.data;
    } catch (error) {
      if (error.message === 'OFFLINE_MODE') {
        // Return cached transaction if available
        const state = store.getState();
        const cachedTransaction = state.offlineData.cachedData.transactions.find(
          transaction => transaction.id === id
        );
        
        if (cachedTransaction) {
          return { data: cachedTransaction };
        }
        throw new Error('This transaction is not available offline.');
      }
      throw error;
    }
  },
  
  // Update transaction status
  updateTransactionStatus: async (id, status, notes = '') => {
    try {
      const response = await api.put(`/transactions/${id}/status`, {
        status,
        notes
      }, {
        showLoading: true,
        loadingMessage: 'Updating transaction...'
      });
      return response.data;
    } catch (error) {
      if (error.message === 'OFFLINE_MODE') {
        throw new Error('Your transaction will be updated when you are back online.');
      }
      throw error;
    }
  },
  
  // Send transaction message
  sendTransactionMessage: async (transactionId, message) => {
    try {
      const response = await api.post(`/transactions/${transactionId}/messages`, {
        content: message
      });
      return response.data;
    } catch (error) {
      if (error.message === 'OFFLINE_MODE') {
        throw new Error('Your message will be sent when you are back online.');
      }
      throw error;
    }
  },
  
  // Get transaction messages
  getTransactionMessages: async (transactionId) => {
    try {
      const response = await api.get(`/transactions/${transactionId}/messages`);
      return response.data;
    } catch (error) {
      if (error.message === 'OFFLINE_MODE') {
        // Return cached messages if available
        const state = store.getState();
        if (state.offlineData.cachedData.transactionMessages) {
          const cachedMessages = state.offlineData.cachedData.transactionMessages[transactionId] || [];
          return { data: cachedMessages };
        }
        throw new Error('Messages are not available offline.');
      }
      throw error;
    }
  },
  
  /**
   * Payments
   */
  
  // Initiate payment
  initiatePayment: async (paymentData) => {
    try {
      const response = await api.post('/payments/initiate', paymentData, {
        showLoading: true,
        loadingMessage: 'Initiating payment...'
      });
      return response.data;
    } catch (error) {
      if (error.message === 'OFFLINE_MODE') {
        throw new Error('Cannot initiate payment while offline. Please try again when you have internet connection.');
      }
      throw error;
    }
  },
  
  // Check payment status
  checkPaymentStatus: async (paymentId) => {
    try {
      const response = await api.get(`/payments/status/${paymentId}`);
      return response.data;
    } catch (error) {
      if (error.message === 'OFFLINE_MODE') {
        throw new Error('Cannot check payment status while offline.');
      }
      throw error;
    }
  },
  
  // Verify payment receipt
  verifyPayment: async (verificationData) => {
    try {
      const response = await api.post('/payments/verify', verificationData, {
        showLoading: true,
        loadingMessage: 'Verifying payment...'
      });
      return response.data;
    } catch (error) {
      if (error.message === 'OFFLINE_MODE') {
        throw new Error('Cannot verify payment while offline. Please try again when you have internet connection.');
      }
      throw error;
    }
  },
  
  /**
   * Market Intelligence
   */
  
  // Get current market prices
  getMarketPrices: async (filters = {}) => {
    try {
      const response = await api.get('/market-prices', { params: filters });
      return response.data;
    } catch (error) {
      if (error.message === 'OFFLINE_MODE') {
        // Return cached market prices if available
        const state = store.getState();
        if (state.offlineData.cachedData.marketPrices) {
          // Apply basic filtering on cached data
          let filteredPrices = state.offlineData.cachedData.marketPrices;
          
          if (filters.product) {
            filteredPrices = filteredPrices.filter(price => 
              price.product_id === filters.product
            );
          }
          
          if (filters.location) {
            filteredPrices = filteredPrices.filter(price => 
              price.location.county === filters.location
            );
          }
          
          return { data: filteredPrices };
        }
        throw new Error('Market prices are not available offline.');
      }
      throw error;
    }
  },
  
  // Get price trends
  getPriceTrends: async (filters = {}) => {
    try {
      const response = await api.get('/market-prices/trends', { params: filters });
      return response.data;
    } catch (error) {
      if (error.message === 'OFFLINE_MODE') {
        throw new Error('Price trends are not available offline.');
      }
      throw error;
    }
  },
  
  /**
   * Products and Categories
   */
  
  // Get product categories
  getProductCategories: async () => {
    try {
      const response = await api.get('/products');
      return response.data;
    } catch (error) {
      if (error.message === 'OFFLINE_MODE') {
        // Return cached categories if available
        const state = store.getState();
        if (state.offlineData.cachedData.productCategories) {
          return { data: state.offlineData.cachedData.productCategories };
        }
        throw new Error('Product categories are not available offline.');
      }
      throw error;
    }
  }
};

export default apiService;
