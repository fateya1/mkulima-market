// src/redux/store.js
import { configureStore } from '@reduxjs/toolkit';
import userReducer from './slices/userSlice';
import listingReducer from './slices/listingSlice';
import transactionReducer from './slices/transactionSlice';
import marketDataReducer from './slices/marketDataSlice';
import logisticsReducer from './slices/logisticsSlice';
import uiReducer from './slices/uiSlice';

export const store = configureStore({
  reducer: {
    user: userReducer,
    listings: listingReducer,
    transactions: transactionReducer,
    marketData: marketDataReducer,
    logistics: logisticsReducer,
    ui: uiReducer,
  },
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware({
      serializableCheck: {
        // Ignore these action types
        ignoredActions: ['user/setLocation'],
        // Ignore these field paths in all actions
        ignoredActionPaths: ['meta.arg', 'payload.timestamp'],
        // Ignore these paths in the state
        ignoredPaths: ['user.location'],
      },
    }),
});

// src/redux/slices/userSlice.js
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import * as userAPI from '../../services/userAPI';

// Async thunks
export const registerUser = createAsyncThunk(
  'user/register',
  async (userData, { rejectWithValue }) => {
    try {
      const response = await userAPI.register(userData);
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);

export const loginUser = createAsyncThunk(
  'user/login',
  async (credentials, { rejectWithValue }) => {
    try {
      const response = await userAPI.login(credentials);
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);

export const updateUserProfile = createAsyncThunk(
  'user/updateProfile',
  async (profileData, { getState, rejectWithValue }) => {
    try {
      const { user } = getState();
      const response = await userAPI.updateProfile(user.id, profileData);
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);

const initialState = {
  id: null,
  phoneNumber: null,
  fullName: null,
  userType: null, // 'farmer', 'buyer', 'transporter', 'admin'
  verificationLevel: 'basic', // 'basic', 'standard', 'enhanced'
  location: null,
  isAuthenticated: false,
  profile: null,
  profileCompletion: 0,
  status: 'idle', // 'idle' | 'loading' | 'succeeded' | 'failed'
  error: null,
  languagePreference: 'en',
  lastActive: null,
};

const userSlice = createSlice({
  name: 'user',
  initialState,
  reducers: {
    logout: (state) => {
      // Reset to initial state but keep language preference
      const language = state.languagePreference;
      Object.assign(state, { ...initialState, languagePreference: language });
    },
    setLanguagePreference: (state, action) => {
      state.languagePreference = action.payload;
    },
    setLocation: (state, action) => {
      state.location = action.payload;
    },
    updateLastActive: (state) => {
      state.lastActive = new Date().toISOString();
    },
  },
  extraReducers: (builder) => {
    builder
      // Register user
      .addCase(registerUser.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(registerUser.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.isAuthenticated = true;
        state.id = action.payload.id;
        state.phoneNumber = action.payload.phoneNumber;
        state.fullName = action.payload.fullName;
        state.userType = action.payload.userType;
        state.verificationLevel = action.payload.verificationLevel;
        state.profileCompletion = action.payload.profileCompletion || 0;
        state.lastActive = new Date().toISOString();
      })
      .addCase(registerUser.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload || 'Registration failed';
      })
      
      // Login user
      .addCase(loginUser.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(loginUser.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.isAuthenticated = true;
        state.id = action.payload.id;
        state.phoneNumber = action.payload.phoneNumber;
        state.fullName = action.payload.fullName;
        state.userType = action.payload.userType;
        state.verificationLevel = action.payload.verificationLevel;
        state.profile = action.payload.profile;
        state.profileCompletion = action.payload.profileCompletion || 0;
        state.lastActive = new Date().toISOString();
      })
      .addCase(loginUser.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload || 'Login failed';
      })
      
      // Update profile
      .addCase(updateUserProfile.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(updateUserProfile.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.profile = action.payload;
        state.profileCompletion = action.payload.profileCompletion || state.profileCompletion;
        state.lastActive = new Date().toISOString();
      })
      .addCase(updateUserProfile.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload || 'Profile update failed';
      });
  },
});

export const { logout, setLanguagePreference, setLocation, updateLastActive } = userSlice.actions;

export default userSlice.reducer;

// src/redux/slices/listingSlice.js
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import * as listingAPI from '../../services/listingAPI';

export const fetchListings = createAsyncThunk(
  'listings/fetchListings',
  async (searchParams, { rejectWithValue }) => {
    try {
      const response = await listingAPI.getListings(searchParams);
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);

export const fetchListingById = createAsyncThunk(
  'listings/fetchListingById',
  async (id, { rejectWithValue }) => {
    try {
      const response = await listingAPI.getListingById(id);
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);

export const createListing = createAsyncThunk(
  'listings/createListing',
  async (listingData, { getState, rejectWithValue }) => {
    try {
      const { user } = getState();
      const response = await listingAPI.createListing({
        ...listingData,
        userId: user.id
      });
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);

export const updateListing = createAsyncThunk(
  'listings/updateListing',
  async ({ id, listingData }, { rejectWithValue }) => {
    try {
      const response = await listingAPI.updateListing(id, listingData);
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);

export const deleteListing = createAsyncThunk(
  'listings/deleteListing',
  async (id, { rejectWithValue }) => {
    try {
      await listingAPI.deleteListing(id);
      return id;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);

const initialState = {
  items: [],
  currentListing: null,
  userListings: [],
  nearby: [],
  total: 0,
  status: 'idle', // 'idle' | 'loading' | 'succeeded' | 'failed'
  error: null,
  filters: {
    location: null,
    radius: 50, // Default radius in km
    product: null,
    minPrice: null,
    maxPrice: null,
    quality: null,
    availability: null,
  },
  pagination: {
    page: 1,
    limit: 10,
    totalPages: 0,
  },
};

const listingSlice = createSlice({
  name: 'listings',
  initialState,
  reducers: {
    setFilters: (state, action) => {
      state.filters = { ...state.filters, ...action.payload };
      // Reset pagination when filters change
      state.pagination.page = 1;
    },
    setPage: (state, action) => {
      state.pagination.page = action.payload;
    },
    clearListingState: (state) => {
      state.currentListing = null;
      state.status = 'idle';
      state.error = null;
    },
  },
  extraReducers: (builder) => {
    builder
      // Fetch listings
      .addCase(fetchListings.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchListings.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.items = action.payload.items;
        state.total = action.payload.total;
        state.pagination.totalPages = Math.ceil(action.payload.total / state.pagination.limit);
      })
      .addCase(fetchListings.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload || 'Failed to fetch listings';
      })
      
      // Fetch listing by ID
      .addCase(fetchListingById.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchListingById.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.currentListing = action.payload;
      })
      .addCase(fetchListingById.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload || 'Failed to fetch listing';
      })
      
      // Create listing
      .addCase(createListing.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(createListing.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.userListings.push(action.payload);
        // If there's an array of all listings, add the new one there too
        if (state.items.length > 0) {
          state.items.unshift(action.payload);
        }
      })
      .addCase(createListing.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload || 'Failed to create listing';
      })
      
      // Update listing
      .addCase(updateListing.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(updateListing.fulfilled, (state, action) => {
        state.status = 'succeeded';
        
        // Update in userListings array
        const userIndex = state.userListings.findIndex(listing => listing.id === action.payload.id);
        if (userIndex !== -1) {
          state.userListings[userIndex] = action.payload;
        }
        
        // Update in items array
        const itemIndex = state.items.findIndex(listing => listing.id === action.payload.id);
        if (itemIndex !== -1) {
          state.items[itemIndex] = action.payload;
        }
        
        // Update currentListing if it's the same one
        if (state.currentListing && state.currentListing.id === action.payload.id) {
          state.currentListing = action.payload;
        }
      })
      .addCase(updateListing.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload || 'Failed to update listing';
      })
      
      // Delete listing
      .addCase(deleteListing.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(deleteListing.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.userListings = state.userListings.filter(listing => listing.id !== action.payload);
        state.items = state.items.filter(listing => listing.id !== action.payload);
        if (state.currentListing && state.currentListing.id === action.payload) {
          state.currentListing = null;
        }
      })
      .addCase(deleteListing.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload || 'Failed to delete listing';
      });
  },
});

export const { setFilters, setPage, clearListingState } = listingSlice.actions;

export default listingSlice.reducer;

// src/redux/slices/transactionSlice.js
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import * as transactionAPI from '../../services/transactionAPI';

export const fetchUserTransactions = createAsyncThunk(
  'transactions/fetchUserTransactions',
  async (_, { getState, rejectWithValue }) => {
    try {
      const { user } = getState();
      const response = await transactionAPI.getUserTransactions(user.id);
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);

export const fetchTransactionById = createAsyncThunk(
  'transactions/fetchTransactionById',
  async (id, { rejectWithValue }) => {
    try {
      const response = await transactionAPI.getTransactionById(id);
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);

export const createTransaction = createAsyncThunk(
  'transactions/createTransaction',
  async (transactionData, { getState, rejectWithValue }) => {
    try {
      const { user } = getState();
      const response = await transactionAPI.createTransaction({
        ...transactionData,
        buyerId: user.userType === 'buyer' ? user.id : transactionData.buyerId,
        sellerId: user.userType === 'farmer' ? user.id : transactionData.sellerId,
      });
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);

export const updateTransactionStatus = createAsyncThunk(
  'transactions/updateStatus',
  async ({ id, status }, { rejectWithValue }) => {
    try {
      const response = await transactionAPI.updateTransactionStatus(id, status);
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);

export const completeTransaction = createAsyncThunk(
  'transactions/complete',
  async (id, { rejectWithValue }) => {
    try {
      const response = await transactionAPI.completeTransaction(id);
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);

export const sendTransactionMessage = createAsyncThunk(
  'transactions/sendMessage',
  async ({ transactionId, message }, { getState, rejectWithValue }) => {
    try {
      const { user } = getState();
      const response = await transactionAPI.sendMessage(transactionId, {
        senderId: user.id,
        content: message,
      });
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);

const initialState = {
  list: [],
  currentTransaction: null,
  messages: [],
  status: 'idle', // 'idle' | 'loading' | 'succeeded' | 'failed'
  error: null,
  filters: {
    status: null, // 'initiated', 'agreed', 'in_progress', 'completed', 'cancelled'
    counterpartyId: null,
    dateRange: null,
  },
};

const transactionSlice = createSlice({
  name: 'transactions',
  initialState,
  reducers: {
    setTransactionFilters: (state, action) => {
      state.filters = { ...state.filters, ...action.payload };
    },
    clearTransactionState: (state) => {
      state.currentTransaction = null;
      state.messages = [];
      state.status = 'idle';
      state.error = null;
    },
  },
  extraReducers: (builder) => {
    builder
      // Fetch user transactions
      .addCase(fetchUserTransactions.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchUserTransactions.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.list = action.payload;
      })
      .addCase(fetchUserTransactions.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload || 'Failed to fetch transactions';
      })
      
      // Fetch transaction by ID
      .addCase(fetchTransactionById.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchTransactionById.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.currentTransaction = action.payload.transaction;
        state.messages = action.payload.messages || [];
      })
      .addCase(fetchTransactionById.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload || 'Failed to fetch transaction';
      })
      
      // Create transaction
      .addCase(createTransaction.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(createTransaction.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.list.push(action.payload);
        state.currentTransaction = action.payload;
      })
      .addCase(createTransaction.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload || 'Failed to create transaction';
      })
      
      // Update transaction status
      .addCase(updateTransactionStatus.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(updateTransactionStatus.fulfilled, (state, action) => {
        state.status = 'succeeded';
        // Update in list array
        const index = state.list.findIndex(tx => tx.id === action.payload.id);
        if (index !== -1) {
          state.list[index] = action.payload;
        }
        // Update current transaction if it's the same one
        if (state.currentTransaction && state.currentTransaction.id === action.payload.id) {
          state.currentTransaction = action.payload;
        }
      })
      .addCase(updateTransactionStatus.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload || 'Failed to update transaction status';
      })
      
      // Complete transaction
      .addCase(completeTransaction.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(completeTransaction.fulfilled, (state, action) => {
        state.status = 'succeeded';
        // Update in list array
        const index = state.list.findIndex(tx => tx.id === action.payload.id);
        if (index !== -1) {
          state.list[index] = action.payload;
        }
        // Update current transaction if it's the same one
        if (state.currentTransaction && state.currentTransaction.id === action.payload.id) {
          state.currentTransaction = action.payload;
        }
      })
      .addCase(completeTransaction.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload || 'Failed to complete transaction';
      })
      
      // Send transaction message
      .addCase(sendTransactionMessage.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(sendTransactionMessage.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.messages.push(action.payload);
      })
      .addCase(sendTransactionMessage.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload || 'Failed to send message';
      });
  },
});

export const { setTransactionFilters, clearTransactionState } = transactionSlice.actions;

export default transactionSlice.reducer;

// src/redux/slices/marketDataSlice.js
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import * as marketDataAPI from '../../services/marketDataAPI';

export const fetchMarketPrices = createAsyncThunk(
  'marketData/fetchPrices',
  async (productParams, { rejectWithValue }) => {
    try {
      const response = await marketDataAPI.getMarketPrices(productParams);
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);

export const fetchPriceTrends = createAsyncThunk(
  'marketData/fetchTrends',
  async (productId, { rejectWithValue }) => {
    try {
      const response = await marketDataAPI.getPriceTrends(productId);
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);

export const fetchProductCategories = createAsyncThunk(
  'marketData/fetchCategories',
  async (_, { rejectWithValue }) => {
    try {
      const response = await marketDataAPI.getProductCategories();
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);

const initialState = {
  currentPrices: {},
  priceTrends: {},
  productCategories: [],
  status: 'idle', // 'idle' | 'loading' | 'succeeded' | 'failed'
  error: null,
};

const marketDataSlice = createSlice({
  name: 'marketData',
  initialState,
  reducers: {
    clearMarketDataState: (state) => {
      state.status = 'idle';
      state.error = null;
    },
  },
  extraReducers: (builder) => {
    builder
      // Fetch market prices
      .addCase(fetchMarketPrices.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchMarketPrices.fulfilled, (state, action) => {
        state.status = 'succeeded';
        // Store prices indexed by product ID
        action.payload.forEach(item => {
          state.currentPrices[item.productId] = item;
        });
      })
      .addCase(fetchMarketPrices.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload || 'Failed to fetch market prices';
      })
      
      // Fetch price trends
      .addCase(fetchPriceTrends.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchPriceTrends.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.priceTrends[action.meta.arg] = action.payload; // Store trends by product ID
      })
      .addCase(fetchPriceTrends.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload || 'Failed to fetch price trends';
      })
      
      // Fetch product categories
      .addCase(fetchProductCategories.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchProductCategories.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.productCategories = action.payload;
      })
      .addCase(fetchProductCategories.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload || 'Failed to fetch product categories';
      });
  },
});

export const { clearMarketDataState } = marketDataSlice.actions;

export default marketDataSlice.reducer;

// src/redux/slices/logisticsSlice.js
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import * as logisticsAPI from '../../services/logisticsAPI';

export const findNearbyTransporters = createAsyncThunk(
  'logistics/findNearbyTransporters',
  async (locationParams, { rejectWithValue }) => {
    try {
      const response = await logisticsAPI.findNearbyTransporters(locationParams);
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);

export const createTransportRequest = createAsyncThunk(
  'logistics/createTransportRequest',
  async (requestData, { getState, rejectWithValue }) => {
    try {
      const { user } = getState();
      const response = await logisticsAPI.createTransportRequest({
        ...requestData,
        requesterId: user.id,
      });
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);

export const fetchUserTransportRequests = createAsyncThunk(
  'logistics/fetchUserTransportRequests',
  async (_, { getState, rejectWithValue }) => {
    try {
      const { user } = getState();
      const response = await logisticsAPI.getUserTransportRequests(user.id);
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);

export const updateTransportRequest = createAsyncThunk(
  'logistics/updateTransportRequest',
  async ({ id, requestData }, { rejectWithValue }) => {
    try {
      const response = await logisticsAPI.updateTransportRequest(id, requestData);
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);

const initialState = {
  nearbyTransporters: [],
  transportRequests: [],
  currentRequest: null,
  status: 'idle', // 'idle' | 'loading' | 'succeeded' | 'failed'
  error: null,
  filters: {
    vehicleType: null,
    radius: 20, // km
    availabilityDate: null,
  },
};

const logisticsSlice = createSlice({
  name: 'logistics',
  initialState,
  reducers: {
    setLogisticsFilters: (state, action) => {
      state.filters = { ...state.filters, ...action.payload };
    },
    clearLogisticsState: (state) => {
      state.currentRequest = null;
      state.status = 'idle';
      state.error = null;
    },
  },
  extraReducers: (builder) => {
    builder
      // Find nearby transporters
      .addCase(findNearbyTransporters.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(findNearbyTransporters.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.nearbyTransporters = action.payload;
      })
      .addCase(findNearbyTransporters.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload || 'Failed to find transporters';
      })
      
      // Create transport request
      .addCase(createTransportRequest.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(createTransportRequest.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.transportRequests.push(action.payload);
        state.currentRequest = action.payload;
      })
      .addCase(createTransportRequest.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload || 'Failed to create transport request';
      })
      
      // Fetch user transport requests
      .addCase(fetchUserTransportRequests.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchUserTransportRequests.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.transportRequests = action.payload;
      })
      .addCase(fetchUserTransportRequests.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload || 'Failed to fetch transport requests';
      })
      
      // Update transport request
      .addCase(updateTransportRequest.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(updateTransportRequest.fulfilled, (state, action) => {
        state.status = 'succeeded';
        // Update in the list
        const index = state.transportRequests.findIndex(req => req.id === action.payload.id);
        if (index !== -1) {
          state.transportRequests[index] = action.payload;
        }
        // Update current request if it's the same one
        if (state.currentRequest && state.currentRequest.id === action.payload.id) {
          state.currentRequest = action.payload;
        }
      })
      .addCase(updateTransportRequest.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload || 'Failed to update transport request';
      });
  },
});

export const { setLogisticsFilters, clearLogisticsState } = logist
